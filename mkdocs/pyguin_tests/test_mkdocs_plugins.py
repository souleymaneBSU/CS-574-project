# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mkdocs.plugins as module_0
import yaml.events as module_1
import base64 as module_2
import yaml as module_3
import posixpath as module_4


def test_case_0():
    plugin_collection_0 = module_0.PluginCollection()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"


def test_case_1():
    dict_0 = module_0.get_plugins()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"


@pytest.mark.xfail(strict=True)
def test_case_2():
    base_plugin_0 = module_0.BasePlugin()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    base_plugin_0.load_config(base_plugin_0)


def test_case_3():
    plugin_collection_0 = module_0.PluginCollection()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    var_0 = plugin_collection_0.on_page_content(
        plugin_collection_0,
        page=plugin_collection_0,
        config=plugin_collection_0,
        files=plugin_collection_0,
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "mkdocs.plugins.PluginCollection"
    )
    assert len(var_0) == 0


def test_case_4():
    int_0 = 2
    callable_0 = module_0.event_priority(int_0)
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    str_0 = "\n    A context manager which yields an open file descriptor ready to be read.\n\n    Accepts a filename as a string, an open or closed file descriptor, or None.\n    When None, it defaults to `mkdocs.yml` in the CWD. If a closed file descriptor\n    is received, a new file descriptor is opened for the same file.\n\n    The file descriptor is automatically closed when the context manager block is existed.\n    "
    none_type_0 = None
    prefixed_logger_0 = module_0.PrefixedLogger(str_0, none_type_0)
    assert prefixed_logger_0.logger is None
    assert prefixed_logger_0.extra == {}
    assert (
        prefixed_logger_0.prefix
        == "\n    A context manager which yields an open file descriptor ready to be read.\n\n    Accepts a filename as a string, an open or closed file descriptor, or None.\n    When None, it defaults to `mkdocs.yml` in the CWD. If a closed file descriptor\n    is received, a new file descriptor is opened for the same file.\n\n    The file descriptor is automatically closed when the context manager block is existed.\n    "
    )


def test_case_5():
    combined_event_0 = module_0.CombinedEvent()
    assert combined_event_0.methods == ()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"


@pytest.mark.xfail(strict=True)
def test_case_6():
    plugin_collection_0 = module_0.PluginCollection()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    plugin_collection_0.__getitem__(plugin_collection_0)


def test_case_7():
    dict_0 = {}
    plugin_collection_0 = module_0.PluginCollection(**dict_0)
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    none_type_0 = None
    var_0 = plugin_collection_0.on_serve(dict_0, config=dict_0, builder=none_type_0)


def test_case_8():
    str_0 = "I];ck-"
    prefixed_logger_0 = module_0.get_plugin_logger(str_0)
    assert (
        f"{type(prefixed_logger_0).__module__}.{type(prefixed_logger_0).__qualname__}"
        == "mkdocs.plugins.PrefixedLogger"
    )
    assert (
        f"{type(prefixed_logger_0.logger).__module__}.{type(prefixed_logger_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert prefixed_logger_0.extra == {}
    assert prefixed_logger_0.prefix == "I];ck-"
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"


def test_case_9():
    combined_event_0 = module_0.CombinedEvent()
    assert combined_event_0.methods == ()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    var_0 = combined_event_0.__get__(combined_event_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "mkdocs.plugins.CombinedEvent"
    )
    assert var_0.methods == ()


@pytest.mark.xfail(strict=True)
def test_case_10():
    plugin_collection_0 = module_0.PluginCollection()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    var_0 = plugin_collection_0.update()
    var_1 = plugin_collection_0.on_page_read_source(page=var_0, config=var_0)
    var_2 = plugin_collection_0.__eq__(plugin_collection_0)
    var_0.__call__(plugin_collection_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    dict_0 = {}
    plugin_collection_0 = module_0.PluginCollection(**dict_0)
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    var_0 = plugin_collection_0.on_page_markdown(
        dict_0, page=plugin_collection_0, config=dict_0, files=plugin_collection_0
    )
    none_type_0 = None
    var_0.represent_yaml_object(var_0, none_type_0, dict_0)


def test_case_12():
    dict_0 = module_0.get_plugins()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    plugin_collection_0 = module_0.PluginCollection()
    none_type_0 = None
    base_plugin_0 = plugin_collection_0.on_config(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    dict_0 = {}
    plugin_collection_0 = module_0.PluginCollection(**dict_0)
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    none_type_0 = None
    var_0 = plugin_collection_0.on_page_context(
        none_type_0, page=dict_0, config=plugin_collection_0, nav=none_type_0
    )
    module_0.get_plugin_logger(var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    dict_0 = {}
    plugin_collection_0 = module_0.PluginCollection(**dict_0)
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    combined_event_0 = module_0.CombinedEvent()
    assert combined_event_0.methods == ()
    var_0 = plugin_collection_0.on_pre_build(config=dict_0)
    dict_0.compose_document()


@pytest.mark.xfail(strict=True)
def test_case_15():
    dict_0 = {}
    plugin_collection_0 = module_0.PluginCollection(**dict_0)
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    dict_1 = {}
    none_type_0 = None
    var_0 = plugin_collection_0.on_pre_template(
        dict_1, template_name=none_type_0, config=plugin_collection_0
    )
    var_1 = plugin_collection_0.on_page_markdown(
        dict_1, page=dict_0, config=dict_0, files=plugin_collection_0
    )
    none_type_1 = None
    var_2 = plugin_collection_0.on_serve(dict_0, config=dict_0, builder=none_type_1)
    var_2.__get__(var_2, var_2)


@pytest.mark.xfail(strict=True)
def test_case_16():
    dict_0 = {}
    plugin_collection_0 = module_0.PluginCollection(**dict_0)
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    var_0 = plugin_collection_0.on_page_markdown(
        dict_0, page=plugin_collection_0, config=dict_0, files=plugin_collection_0
    )
    var_1 = plugin_collection_0.on_serve(dict_0, config=dict_0, builder=var_0)
    var_2 = plugin_collection_0.on_nav(dict_0, config=var_0, files=var_0)
    var_3 = var_2.__le__(var_1)
    var_3.on_env(var_1, config=var_1, files=var_3)


@pytest.mark.xfail(strict=True)
def test_case_17():
    plugin_collection_0 = module_0.PluginCollection()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    none_type_0 = None
    var_0 = plugin_collection_0.on_env(
        plugin_collection_0, config=none_type_0, files=none_type_0
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "mkdocs.plugins.PluginCollection"
    )
    assert len(var_0) == 0
    none_type_1 = plugin_collection_0.on_shutdown()
    var_1 = plugin_collection_0.items()
    var_1.get_node()


@pytest.mark.xfail(strict=True)
def test_case_18():
    dict_0 = module_0.get_plugins()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    plugin_collection_0 = module_0.PluginCollection()
    var_0 = plugin_collection_0.on_pre_page(
        plugin_collection_0, config=plugin_collection_0, files=plugin_collection_0
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "mkdocs.plugins.PluginCollection"
    )
    assert len(var_0) == 0
    var_1 = plugin_collection_0.on_page_content(
        plugin_collection_0,
        page=plugin_collection_0,
        config=plugin_collection_0,
        files=plugin_collection_0,
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "mkdocs.plugins.PluginCollection"
    )
    assert len(var_1) == 0
    var_2 = plugin_collection_0.on_env(var_1, config=var_1, files=var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "mkdocs.plugins.PluginCollection"
    )
    assert len(var_2) == 0
    var_2.__call__(dict_0, **plugin_collection_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    dict_0 = module_0.get_plugins()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    plugin_collection_0 = module_0.PluginCollection()
    none_type_0 = plugin_collection_0.on_shutdown()
    none_type_1 = None
    var_0 = plugin_collection_0.on_files(none_type_1, config=plugin_collection_0)
    prefixed_logger_0 = module_0.PrefixedLogger(none_type_1, none_type_1)
    assert prefixed_logger_0.logger is None
    assert prefixed_logger_0.extra == {}
    assert prefixed_logger_0.prefix is None
    combined_event_0 = module_0.CombinedEvent()
    assert combined_event_0.methods == ()
    var_1 = plugin_collection_0.__setitem__(none_type_1, none_type_1)
    assert len(plugin_collection_0) == 1
    var_1.on_post_build(config=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    dict_0 = module_0.get_plugins()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    plugin_collection_0 = module_0.PluginCollection()
    var_0 = plugin_collection_0.on_page_content(
        plugin_collection_0,
        page=plugin_collection_0,
        config=plugin_collection_0,
        files=plugin_collection_0,
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "mkdocs.plugins.PluginCollection"
    )
    assert len(var_0) == 0
    var_1 = plugin_collection_0.on_env(var_0, config=var_0, files=var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "mkdocs.plugins.PluginCollection"
    )
    assert len(var_1) == 0
    none_type_0 = plugin_collection_0.on_startup(command=var_0, dirty=dict_0)
    var_0.__call__(var_0, **plugin_collection_0)


def test_case_21():
    dict_0 = module_0.get_plugins()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    plugin_collection_0 = module_0.PluginCollection()
    combined_event_0 = module_0.CombinedEvent()
    assert combined_event_0.methods == ()
    var_0 = combined_event_0.__get__(combined_event_0, dict_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "mkdocs.plugins.CombinedEvent"
    )
    assert var_0.methods == ()
    var_1 = plugin_collection_0.on_post_template(
        dict_0, template_name=combined_event_0, config=dict_0
    )
    var_2 = plugin_collection_0.on_files(dict_0, config=plugin_collection_0)
    with pytest.raises(TypeError):
        combined_event_0.__call__(combined_event_0, **plugin_collection_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    dict_0 = module_0.get_plugins()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    plugin_collection_0 = module_0.PluginCollection()
    var_0 = plugin_collection_0.on_serve(
        dict_0, config=plugin_collection_0, builder=plugin_collection_0
    )
    combined_event_0 = module_0.CombinedEvent()
    assert combined_event_0.methods == ()
    var_1 = combined_event_0.__get__(combined_event_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "mkdocs.plugins.CombinedEvent"
    )
    assert var_1.methods == ()
    var_2 = plugin_collection_0.on_page_content(
        plugin_collection_0,
        page=plugin_collection_0,
        config=plugin_collection_0,
        files=plugin_collection_0,
    )
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "mkdocs.plugins.PluginCollection"
    )
    assert len(var_2) == 0
    var_3 = plugin_collection_0.on_post_build(config=dict_0)
    mapping_start_event_0 = module_1.MappingStartEvent(
        var_2, var_2, combined_event_0, end_mark=plugin_collection_0
    )
    dict_0.on_page_context(var_2, page=dict_0, config=var_3, nav=var_1)


@pytest.mark.xfail(strict=True)
def test_case_23():
    plugin_collection_0 = module_0.PluginCollection()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    none_type_0 = None
    var_0 = plugin_collection_0.on_post_page(
        none_type_0, page=none_type_0, config=plugin_collection_0
    )
    base_plugin_0 = module_0.BasePlugin()
    module_2.b64encode(base_plugin_0)


def test_case_24():
    dict_0 = module_0.get_plugins()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    plugin_collection_0 = module_0.PluginCollection()
    combined_event_0 = module_0.CombinedEvent()
    assert combined_event_0.methods == ()
    var_0 = plugin_collection_0.on_page_content(
        plugin_collection_0,
        page=plugin_collection_0,
        config=plugin_collection_0,
        files=plugin_collection_0,
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "mkdocs.plugins.PluginCollection"
    )
    assert len(var_0) == 0
    none_type_0 = var_0.on_build_error(error=var_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    dict_0 = module_0.get_plugins()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    plugin_collection_0 = module_0.PluginCollection()
    none_type_0 = None
    prefixed_logger_0 = module_0.PrefixedLogger(none_type_0, none_type_0)
    assert prefixed_logger_0.logger is None
    assert prefixed_logger_0.extra == {}
    assert prefixed_logger_0.prefix is None
    var_0 = module_3.parse(dict_0)
    var_1 = plugin_collection_0.on_template_context(
        var_0, template_name=none_type_0, config=dict_0
    )
    combined_event_0 = module_0.CombinedEvent()
    assert combined_event_0.methods == ()
    var_2 = combined_event_0.__get__(combined_event_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "mkdocs.plugins.CombinedEvent"
    )
    assert var_2.methods == ()
    var_3 = plugin_collection_0.on_page_content(
        plugin_collection_0,
        page=plugin_collection_0,
        config=plugin_collection_0,
        files=plugin_collection_0,
    )
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "mkdocs.plugins.PluginCollection"
    )
    assert len(var_3) == 0
    var_4 = plugin_collection_0.on_post_build(config=dict_0)
    mapping_start_event_0 = module_1.MappingStartEvent(
        var_3, var_3, combined_event_0, end_mark=plugin_collection_0
    )
    var_5 = plugin_collection_0.update()
    var_5.on_page_context(var_5, page=var_5, config=plugin_collection_0, nav=var_5)


@pytest.mark.xfail(strict=True)
def test_case_26():
    dict_0 = module_0.get_plugins()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    plugin_collection_0 = module_0.PluginCollection()
    none_type_0 = None
    prefixed_logger_0 = module_0.PrefixedLogger(none_type_0, none_type_0)
    assert prefixed_logger_0.logger is None
    assert prefixed_logger_0.extra == {}
    assert prefixed_logger_0.prefix is None
    list_0 = [prefixed_logger_0]
    combined_event_0 = module_0.CombinedEvent(*list_0)
    assert (
        f"{type(combined_event_0).__module__}.{type(combined_event_0).__qualname__}"
        == "mkdocs.plugins.CombinedEvent"
    )
    assert (
        f"{type(combined_event_0.methods).__module__}.{type(combined_event_0.methods).__qualname__}"
        == "builtins.tuple"
    )
    assert len(combined_event_0.methods) == 1
    combined_event_0.__get__(plugin_collection_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    dict_0 = module_0.get_plugins()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    plugin_collection_0 = module_0.PluginCollection()
    none_type_0 = None
    str_0 = "4n}o^1:,"
    bool_0 = True
    prefixed_logger_0 = module_0.PrefixedLogger(str_0, bool_0)
    assert prefixed_logger_0.logger is True
    assert prefixed_logger_0.extra == {}
    assert prefixed_logger_0.prefix == "4n}o^1:,"
    str_1 = "g5RP&Z~.@V,*\x0b4!5:?x"
    tuple_0 = prefixed_logger_0.process(str_1, plugin_collection_0)
    combined_event_0 = module_0.CombinedEvent()
    assert combined_event_0.methods == ()
    var_0 = combined_event_0.__get__(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "mkdocs.plugins.CombinedEvent"
    )
    assert var_0.methods == ()
    str_2 = ">9"
    dict_1 = {str_2: dict_0, str_0: dict_0}
    var_1 = plugin_collection_0.on_page_content(
        str_0, page=dict_1, config=plugin_collection_0, files=combined_event_0
    )
    assert var_1 == "4n}o^1:,"
    var_1.on_post_build(config=prefixed_logger_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    dict_0 = module_0.get_plugins()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    plugin_collection_0 = module_0.PluginCollection()
    none_type_0 = None
    prefixed_logger_0 = module_0.PrefixedLogger(none_type_0, none_type_0)
    assert prefixed_logger_0.logger is None
    assert prefixed_logger_0.extra == {}
    assert prefixed_logger_0.prefix is None
    combined_event_0 = module_0.CombinedEvent()
    assert combined_event_0.methods == ()
    var_0 = plugin_collection_0.__setitem__(none_type_0, none_type_0)
    assert len(plugin_collection_0) == 1
    var_1 = plugin_collection_0.on_page_content(
        combined_event_0,
        page=prefixed_logger_0,
        config=var_0,
        files=plugin_collection_0,
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "mkdocs.plugins.CombinedEvent"
    )
    assert var_1.methods == ()
    var_0.on_post_build(config=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    dict_0 = module_0.get_plugins()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    plugin_collection_0 = module_0.PluginCollection()
    str_0 = '0~7v$R{y"#-g=hF'
    none_type_0 = plugin_collection_0.__setitem__(str_0, plugin_collection_0)
    assert len(plugin_collection_0) == 1
    combined_event_0 = module_0.CombinedEvent()
    assert combined_event_0.methods == ()
    plugin_collection_0.on_page_content(
        combined_event_0,
        page=plugin_collection_0,
        config=dict_0,
        files=plugin_collection_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_30():
    dict_0 = module_0.get_plugins()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    plugin_collection_0 = module_0.PluginCollection()
    var_0 = plugin_collection_0.on_config(dict_0)
    none_type_0 = None
    none_type_1 = plugin_collection_0.__setitem__(none_type_0, plugin_collection_0)
    assert len(plugin_collection_0) == 1
    prefixed_logger_0 = module_0.PrefixedLogger(none_type_1, none_type_1)
    assert prefixed_logger_0.logger is None
    assert prefixed_logger_0.extra == {}
    assert prefixed_logger_0.prefix is None
    var_1 = plugin_collection_0.__setitem__(none_type_1, none_type_1)
    plugin_collection_0.on_page_content(
        var_1, page=prefixed_logger_0, config=var_1, files=plugin_collection_0
    )


@pytest.mark.xfail(strict=True)
def test_case_31():
    plugin_collection_0 = module_0.PluginCollection()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    var_0 = plugin_collection_0.on_config(plugin_collection_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "mkdocs.plugins.PluginCollection"
    )
    assert len(var_0) == 0
    none_type_0 = None
    none_type_1 = plugin_collection_0.__setitem__(none_type_0, plugin_collection_0)
    assert len(plugin_collection_0) == 1
    assert len(var_0) == 1
    prefixed_logger_0 = module_0.PrefixedLogger(var_0, var_0)
    assert (
        f"{type(prefixed_logger_0.logger).__module__}.{type(prefixed_logger_0.logger).__qualname__}"
        == "mkdocs.plugins.PluginCollection"
    )
    assert len(prefixed_logger_0.logger) == 1
    assert prefixed_logger_0.extra == {}
    assert (
        f"{type(prefixed_logger_0.prefix).__module__}.{type(prefixed_logger_0.prefix).__qualname__}"
        == "mkdocs.plugins.PluginCollection"
    )
    assert len(prefixed_logger_0.prefix) == 1
    combined_event_0 = module_0.CombinedEvent()
    assert combined_event_0.methods == ()
    plugin_collection_0.on_page_content(
        combined_event_0,
        page=prefixed_logger_0,
        config=var_0,
        files=plugin_collection_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_32():
    plugin_collection_0 = module_0.PluginCollection()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    none_type_0 = None
    var_0 = plugin_collection_0.on_config(plugin_collection_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "mkdocs.plugins.PluginCollection"
    )
    assert len(var_0) == 0
    str_0 = '0~7v$R{y"#-g=hF'
    none_type_1 = plugin_collection_0.__setitem__(str_0, plugin_collection_0)
    assert len(plugin_collection_0) == 1
    assert len(var_0) == 1
    prefixed_logger_0 = module_0.PrefixedLogger(none_type_0, none_type_0)
    assert prefixed_logger_0.logger is None
    assert prefixed_logger_0.extra == {}
    assert prefixed_logger_0.prefix is None
    combined_event_0 = module_0.CombinedEvent()
    assert combined_event_0.methods == ()
    combined_event_1 = module_0.CombinedEvent()
    assert combined_event_1.methods == ()
    var_1 = var_0.__setitem__(none_type_0, var_0)
    assert len(plugin_collection_0) == 2
    assert len(var_0) == 2
    plugin_collection_0.on_page_content(
        none_type_0, page=none_type_1, config=var_0, files=var_0
    )


@pytest.mark.xfail(strict=True)
def test_case_33():
    dict_0 = module_0.get_plugins()
    assert (
        f"{type(module_0.P).__module__}.{type(module_0.P).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.plugins"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert module_0.EVENTS == (
        "startup",
        "shutdown",
        "serve",
        "config",
        "pre_build",
        "files",
        "nav",
        "env",
        "post_build",
        "build_error",
        "pre_template",
        "template_context",
        "post_template",
        "pre_page",
        "page_read_source",
        "page_markdown",
        "page_content",
        "page_context",
        "post_page",
    )
    assert module_0.k == "post_page"
    plugin_collection_0 = module_0.PluginCollection()
    none_type_0 = None
    var_0 = plugin_collection_0.on_config(plugin_collection_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "mkdocs.plugins.PluginCollection"
    )
    assert len(var_0) == 0
    str_0 = '0~7v$R{y"#-g=hF'
    str_1 = '5"=<^i.>'
    none_type_1 = plugin_collection_0.__setitem__(str_1, var_0)
    assert len(plugin_collection_0) == 1
    assert len(var_0) == 1
    prefixed_logger_0 = module_0.PrefixedLogger(str_0, none_type_0)
    assert prefixed_logger_0.logger is None
    assert prefixed_logger_0.extra == {}
    assert prefixed_logger_0.prefix == '0~7v$R{y"#-g=hF'
    none_type_2 = var_0.__setitem__(str_1, var_0)
    prefixed_logger_1 = module_0.PrefixedLogger(none_type_2, var_0)
    assert (
        f"{type(prefixed_logger_1.logger).__module__}.{type(prefixed_logger_1.logger).__qualname__}"
        == "mkdocs.plugins.PluginCollection"
    )
    assert len(prefixed_logger_1.logger) == 1
    assert prefixed_logger_1.extra == {}
    assert prefixed_logger_1.prefix is None
    combined_event_0 = module_0.CombinedEvent()
    assert combined_event_0.methods == ()
    module_4.normcase(none_type_1)
