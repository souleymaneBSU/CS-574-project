# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mkdocs.config.base as module_0
import re as module_1
import base64 as module_2
import yaml as module_3


@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.Config()


@pytest.mark.xfail(strict=True)
def test_case_1():
    module_0.load_config()


@pytest.mark.xfail(strict=True)
def test_case_2():
    module_0.load_config()


@pytest.mark.xfail(strict=True)
def test_case_3():
    base_config_option_0 = module_0.BaseConfigOption()
    assert base_config_option_0.warnings == []
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.config"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert (
        f"{type(module_0.BaseConfigOption.default).__module__}.{type(module_0.BaseConfigOption.default).__qualname__}"
        == "builtins.property"
    )
    var_0 = base_config_option_0.__get__(base_config_option_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "mkdocs.config.base.BaseConfigOption"
    )
    assert var_0.warnings == []
    base_config_option_1 = module_0.BaseConfigOption()
    assert base_config_option_1.warnings == []
    none_type_0 = None
    none_type_1 = base_config_option_0.pre_validation(
        base_config_option_1, base_config_option_1
    )
    var_1 = base_config_option_1.__get__(base_config_option_1, none_type_0)
    assert var_1.warnings == []
    none_type_2 = None
    module_1.subn(none_type_2, base_config_option_1, none_type_2, flags=none_type_2)


def test_case_4():
    validation_error_0 = module_0.ValidationError()
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.config"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    base_config_option_0 = module_0.BaseConfigOption()
    assert base_config_option_0.warnings == []
    assert (
        f"{type(module_0.BaseConfigOption.default).__module__}.{type(module_0.BaseConfigOption.default).__qualname__}"
        == "builtins.property"
    )
    var_0 = base_config_option_0.run_validation(base_config_option_0)
    assert var_0.warnings == []
    with pytest.raises(AttributeError):
        base_config_option_0.__set__(validation_error_0, validation_error_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    validation_error_0 = module_0.ValidationError()
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.config"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    var_0 = validation_error_0.__eq__(validation_error_0)
    assert var_0 is True
    module_0.load_config(config_file_path=validation_error_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    validation_error_0 = module_0.ValidationError()
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.config"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    str_0 = "U0q\x0c'"
    var_0 = validation_error_0.__eq__(str_0)
    assert var_0 is False
    module_0.load_config()


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "U0q\x0c'"
    module_0.Config(str_0)


def test_case_8():
    var_0 = module_0.BaseConfigOption()
    assert var_0.warnings == []
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.config"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert (
        f"{type(module_0.BaseConfigOption.default).__module__}.{type(module_0.BaseConfigOption.default).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_9():
    base_config_option_0 = module_0.BaseConfigOption()
    assert base_config_option_0.warnings == []
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.config"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert (
        f"{type(module_0.BaseConfigOption.default).__module__}.{type(module_0.BaseConfigOption.default).__qualname__}"
        == "builtins.property"
    )
    var_0 = base_config_option_0.validate(base_config_option_0)
    assert var_0.warnings == []
    validation_error_0 = module_0.ValidationError()
    module_0.load_config(config_file_path=var_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "U0q\x0c'"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.load_config(str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    base_config_option_0 = module_0.BaseConfigOption()
    assert base_config_option_0.warnings == []
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.config"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    assert (
        f"{type(module_0.BaseConfigOption.default).__module__}.{type(module_0.BaseConfigOption.default).__qualname__}"
        == "builtins.property"
    )
    str_0 = "Pe$"
    none_type_0 = base_config_option_0.post_validation(base_config_option_0, str_0)
    module_2.b32hexdecode(base_config_option_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    dict_0 = {}
    module_0.load_config(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    dict_0 = {}
    module_0.load_config(config_file_path=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "U0q\x0c'"
    module_0.load_config(str_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    var_0 = module_1.purge()
    str_0 = "U0q\x0c'"
    dict_0 = {str_0: str_0, str_0: var_0}
    module_0.load_config(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    dict_0 = {}
    legacy_config_0 = module_0.LegacyConfig(dict_0)
    assert (
        f"{type(legacy_config_0).__module__}.{type(legacy_config_0).__qualname__}"
        == "mkdocs.config.base.LegacyConfig"
    )
    assert len(legacy_config_0) == 0
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.config"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    module_0.load_config(dict_0, config_file_path=dict_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    validation_error_0 = module_0.ValidationError()
    assert (
        f"{type(module_0.log).__module__}.{type(module_0.log).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.log.name == "mkdocs.config"
    assert module_0.log.level == 0
    assert (
        f"{type(module_0.log.parent).__module__}.{type(module_0.log.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.log.handlers == []
    str_0 = ">"
    var_0 = module_3.dump(validation_error_0)
    module_0.load_config(str_0)
