# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mkdocs.structure.toc as module_0
import typing as module_1


def test_case_0():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )


def test_case_1():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    toc_token_0 = module_0._TocToken()


def test_case_2():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()


def test_case_3():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    str_2 = anchor_link_1.indent_print()
    assert str_2 == "0zd.=TZe`Q}Iz - #0zd.=TZe`Q}Iz\n"


def test_case_4():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_0 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    str_2 = "&)mn:m&rM[kGkY)&"
    str_3 = "haOX%\rSJ&"
    int_1 = 2241
    anchor_link_2 = module_0.AnchorLink(str_2, str_3, int_1)
    assert anchor_link_2.title == "&)mn:m&rM[kGkY)&"
    assert anchor_link_2.id == "haOX%\rSJ&"
    assert anchor_link_2.level == 2241


def test_case_5():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_2 = module_0.AnchorLink(str_0, toc_token_0, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == {}
    assert anchor_link_2.level is True


def test_case_6():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()


def test_case_7():
    str_0 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, str_0)
    assert anchor_link_0.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.level == "\x0cdW+v0'pk+\"T7x\t"
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )


def test_case_8():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_2 = module_0.AnchorLink(str_0, toc_token_0, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == {}
    assert anchor_link_2.level is True
    str_2 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_2, str_2, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    toc_token_1 = module_0._TocToken()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_3, str_3, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    list_0 = [anchor_link_4, anchor_link_4, anchor_link_4, anchor_link_4]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_4 = var_0.__str__()
    str_5 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_5 = module_0.AnchorLink(str_5, str_5, str_5)
    assert anchor_link_5.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_5.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_5.level == "\x0cdW+v0'pk+\"T7x\t"
    str_6 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_6 = module_0.AnchorLink(str_6, str_6, bool_4)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    toc_token_2 = module_0._TocToken(**toc_token_0)


def test_case_9():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    str_2 = var_0.__str__()


def test_case_10():
    list_0 = []
    table_of_contents_0 = module_0.get_toc(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 0
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_0 = var_3.__str__()


def test_case_11():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    str_2 = var_0.__str__()
    list_1 = []
    table_of_contents_1 = module_0.get_toc(list_1)
    assert (
        f"{type(table_of_contents_1).__module__}.{type(table_of_contents_1).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_1) == 0
    var_1 = table_of_contents_1.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    str_3 = var_4.__str__()
    str_4 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_4, str_4, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_2 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_1 = table_of_contents_2.__len__()
    var_5 = table_of_contents_2.__iter__()
    str_5 = var_5.__str__()
    iterator_0 = var_5.__iter__()


def test_case_12():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    str_1 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, str_1)
    assert anchor_link_1.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.level == "\x0cdW+v0'pk+\"T7x\t"
    str_2 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_1 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    var_0 = table_of_contents_1.__iter__()
    str_3 = var_0.__str__()
    str_4 = var_0.__str__()
    str_5 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_5, str_5, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    list_2 = [anchor_link_3, anchor_link_3, anchor_link_3, anchor_link_3]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_2 = table_of_contents_2.__len__()
    var_1 = table_of_contents_2.__iter__()
    str_6 = var_1.__str__()
    list_3 = []
    table_of_contents_3 = module_0.get_toc(list_3)
    assert (
        f"{type(table_of_contents_3).__module__}.{type(table_of_contents_3).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_3) == 0
    var_2 = table_of_contents_3.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    str_7 = var_5.__str__()
    str_8 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_8, str_8, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    str_9 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_5 = module_0.AnchorLink(str_9, str_9, bool_4)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_6 = module_0.AnchorLink(str_8, toc_token_0, bool_4)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == {}
    assert anchor_link_6.level is True
    str_10 = "\naU\r_yEc4\rI8\t`o6}r5u"
    anchor_link_7 = module_0.AnchorLink(str_10, bool_2, bool_2)
    assert anchor_link_7.title == "\naU\r_yEc4\rI8\t`o6}r5u"
    assert anchor_link_7.id is True
    assert anchor_link_7.level is True


def test_case_13():
    list_0 = []
    table_of_contents_0 = module_0.get_toc(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 0
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_0 = var_3.__str__()
    str_1 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_0 = module_0.AnchorLink(str_1, str_1, str_1)
    assert anchor_link_0.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.level == "\x0cdW+v0'pk+\"T7x\t"
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_2 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_1 = module_0.AnchorLink(str_2, str_2, bool_0)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    str_3 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_1 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_0 = table_of_contents_1.__len__()
    str_4 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_4, str_4, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    toc_token_0 = module_0._TocToken()
    str_5 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_5, str_5, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    list_2 = [anchor_link_4, anchor_link_4, anchor_link_4, anchor_link_4]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_1 = table_of_contents_2.__len__()
    var_4 = table_of_contents_2.__iter__()
    str_6 = var_4.__str__()
    toc_token_1 = module_0._TocToken()


def test_case_14():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    int_1 = table_of_contents_0.__len__()


def test_case_15():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    toc_token_0 = module_0._TocToken()
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    str_2 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    str_3 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_3 = module_0.AnchorLink(str_3, str_3, bool_3)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    toc_token_1 = module_0._TocToken()
    anchor_link_4 = module_0.AnchorLink(str_2, toc_token_1, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == {}
    assert anchor_link_4.level is True
    str_4 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_5 = module_0.AnchorLink(str_4, str_4, bool_4)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    list_0 = [anchor_link_5, anchor_link_5, anchor_link_5, anchor_link_5]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    int_1 = table_of_contents_0.__len__()


def test_case_16():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    int_1 = table_of_contents_0.__len__()
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    str_2 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_3 = module_0.AnchorLink(str_1, toc_token_0, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == {}
    assert anchor_link_3.level is True
    str_3 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_3, str_3, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    list_1 = [anchor_link_4, anchor_link_4, anchor_link_4, anchor_link_4]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_2 = table_of_contents_1.__len__()
    str_4 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_5 = module_0.AnchorLink(str_4, str_4, str_4)
    assert anchor_link_5.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_5.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_5.level == "\x0cdW+v0'pk+\"T7x\t"
    str_5 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_6 = module_0.AnchorLink(str_5, str_5, bool_4)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    list_2 = [anchor_link_6, anchor_link_6, anchor_link_6, anchor_link_6]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_3 = table_of_contents_2.__len__()
    var_0 = table_of_contents_2.__iter__()
    str_6 = var_0.__str__()
    str_7 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_7 = module_0.AnchorLink(str_7, str_7, bool_5)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.level is True
    list_3 = [anchor_link_7, anchor_link_7, anchor_link_7, anchor_link_7]
    table_of_contents_3 = module_0.TableOfContents(list_3)
    int_4 = table_of_contents_3.__len__()
    var_1 = table_of_contents_3.__iter__()
    str_8 = var_1.__str__()
    str_9 = var_1.__str__()
    str_10 = anchor_link_0.__str__()
    assert str_10 == "0zd.=TZe`Q}Iz - #0zd.=TZe`Q}Iz\n"


def test_case_17():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    str_2 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_1 = module_0.AnchorLink(str_2, str_2, str_2)
    assert anchor_link_1.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.level == "\x0cdW+v0'pk+\"T7x\t"
    str_3 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    toc_token_0 = module_0._TocToken()
    str_4 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_4, str_4, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    str_5 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_5, str_5, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    toc_token_1 = module_0._TocToken()
    anchor_link_5 = module_0.AnchorLink(str_4, toc_token_1, bool_3)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == {}
    assert anchor_link_5.level is True
    str_6 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_6 = module_0.AnchorLink(str_6, str_6, bool_4)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    list_1 = [anchor_link_6, anchor_link_6, anchor_link_6, anchor_link_6]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    var_1 = table_of_contents_1.__iter__()
    str_7 = var_1.__str__()
    str_8 = var_1.__str__()
    str_9 = anchor_link_6.__str__()
    assert str_9 == "0zd.=TZe`Q}Iz - #0zd.=TZe`Q}Iz\n"


def test_case_18():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_1 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    int_2 = table_of_contents_1.__len__()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    str_3 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_3 = module_0.AnchorLink(str_3, str_3, bool_3)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    toc_token_0 = module_0._TocToken()
    str_4 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_4 = module_0.AnchorLink(str_4, str_4, bool_4)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    list_2 = [anchor_link_4, anchor_link_4, anchor_link_4, anchor_link_4]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_3 = table_of_contents_2.__len__()
    var_0 = table_of_contents_2.__iter__()
    str_5 = var_0.__str__()
    str_6 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_5 = module_0.AnchorLink(str_6, str_6, str_6)
    assert anchor_link_5.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_5.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_5.level == "\x0cdW+v0'pk+\"T7x\t"
    str_7 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_6 = module_0.AnchorLink(str_7, str_7, bool_5)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    list_3 = [anchor_link_6, anchor_link_6, anchor_link_6, anchor_link_6]
    table_of_contents_3 = module_0.TableOfContents(list_3)
    int_4 = table_of_contents_3.__len__()
    var_1 = table_of_contents_3.__iter__()
    str_8 = var_1.__str__()
    str_9 = var_1.__str__()
    list_4 = []
    table_of_contents_4 = module_0.get_toc(list_4)
    assert (
        f"{type(table_of_contents_4).__module__}.{type(table_of_contents_4).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_4) == 0
    var_2 = table_of_contents_4.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    str_10 = var_5.__str__()
    str_11 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_7 = module_0.AnchorLink(str_11, str_11, bool_6)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.level is True
    str_12 = "0zd.=TZe`Q}Iz"
    bool_7 = True
    anchor_link_8 = module_0.AnchorLink(str_12, str_12, bool_7)
    assert anchor_link_8.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.level is True
    toc_token_1 = module_0._TocToken()
    anchor_link_9 = module_0.AnchorLink(str_11, toc_token_1, bool_7)
    assert anchor_link_9.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.id == {}
    assert anchor_link_9.level is True
    int_5 = table_of_contents_4.__len__()


def test_case_19():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    int_1 = table_of_contents_0.__len__()
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_1 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_2 = table_of_contents_1.__len__()
    var_0 = table_of_contents_1.__iter__()
    str_2 = var_0.__str__()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    str_4 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_3 = module_0.AnchorLink(str_4, str_4, bool_3)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_4 = module_0.AnchorLink(str_3, toc_token_0, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == {}
    assert anchor_link_4.level is True
    str_5 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_5 = module_0.AnchorLink(str_5, str_5, str_5)
    assert anchor_link_5.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_5.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_5.level == "\x0cdW+v0'pk+\"T7x\t"
    str_6 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_6 = module_0.AnchorLink(str_6, str_6, bool_4)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    toc_token_1 = module_0._TocToken()
    str_7 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_7 = module_0.AnchorLink(str_7, str_7, bool_5)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.level is True
    list_2 = [anchor_link_7, anchor_link_7, anchor_link_7, anchor_link_7]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_3 = table_of_contents_2.__len__()
    str_8 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_8 = module_0.AnchorLink(str_8, str_8, bool_6)
    assert anchor_link_8.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.level is True
    str_9 = "0zd.=TZe`Q}Iz"
    bool_7 = True
    anchor_link_9 = module_0.AnchorLink(str_9, str_9, bool_7)
    assert anchor_link_9.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.level is True
    list_3 = [anchor_link_9, anchor_link_9, anchor_link_9, anchor_link_9]
    table_of_contents_3 = module_0.TableOfContents(list_3)
    int_4 = table_of_contents_3.__len__()
    var_1 = table_of_contents_3.__iter__()
    str_10 = var_1.__str__()
    str_11 = var_1.__str__()
    str_12 = anchor_link_8.indent_print()
    assert str_12 == "0zd.=TZe`Q}Iz - #0zd.=TZe`Q}Iz\n"


def test_case_20():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_0 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_2 = var_0.__str__()
    str_3 = var_0.__str__()
    anchor_link_2 = module_0.AnchorLink(var_0, bool_1, int_0)
    assert (
        f"{type(anchor_link_2.title).__module__}.{type(anchor_link_2.title).__qualname__}"
        == "builtins.list_iterator"
    )
    assert anchor_link_2.id is True
    assert anchor_link_2.level == 4


def test_case_21():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_2 = module_0.AnchorLink(str_0, toc_token_0, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == {}
    assert anchor_link_2.level is True
    str_2 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_2, str_2, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    list_0 = [anchor_link_3, anchor_link_3, anchor_link_3, anchor_link_3]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    int_1 = table_of_contents_0.__len__()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_3, str_3, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    str_4 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_5 = module_0.AnchorLink(str_4, str_4, bool_4)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    list_1 = [anchor_link_5, anchor_link_5, anchor_link_5, anchor_link_5]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_2 = table_of_contents_1.__len__()
    table_of_contents_2 = module_0.TableOfContents(table_of_contents_0)


def test_case_22():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_2, str_2, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    toc_token_0 = module_0._TocToken()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_1 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    str_4 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_3 = module_0.AnchorLink(str_4, str_4, bool_3)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    str_5 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_4 = module_0.AnchorLink(str_5, str_5, bool_4)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    str_6 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_5 = module_0.AnchorLink(str_6, str_6, bool_5)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    toc_token_1 = module_0._TocToken()
    anchor_link_6 = module_0.AnchorLink(str_5, toc_token_1, bool_5)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == {}
    assert anchor_link_6.level is True
    str_7 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_7 = module_0.AnchorLink(str_7, str_7, bool_6)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.level is True
    list_2 = [anchor_link_7, anchor_link_7, anchor_link_7, anchor_link_7]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_2 = table_of_contents_2.__len__()
    var_1 = table_of_contents_2.__iter__()
    str_8 = var_1.__str__()
    str_9 = var_1.__str__()
    str_10 = "0zd.=TZe`Q}Iz"
    bool_7 = True
    anchor_link_8 = module_0.AnchorLink(str_10, str_10, bool_7)
    assert anchor_link_8.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.level is True
    list_3 = [anchor_link_8, anchor_link_8, anchor_link_8, anchor_link_8]
    table_of_contents_3 = module_0.TableOfContents(list_3)
    int_3 = table_of_contents_3.__len__()
    int_4 = table_of_contents_3.__len__()
    list_4 = []
    table_of_contents_4 = module_0.get_toc(list_4)
    assert (
        f"{type(table_of_contents_4).__module__}.{type(table_of_contents_4).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_4) == 0
    var_2 = table_of_contents_4.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    str_11 = var_5.__str__()
    int_5 = table_of_contents_4.__len__()


def test_case_23():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    str_2 = var_0.__str__()
    str_3 = var_0.__str__()


def test_case_24():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_2, str_2, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    str_3 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_3 = module_0.AnchorLink(str_2, toc_token_0, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == {}
    assert anchor_link_3.level is True
    str_4 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_4, str_4, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    list_1 = [anchor_link_4, anchor_link_4, anchor_link_4, anchor_link_4]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    str_5 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_5 = module_0.AnchorLink(str_5, str_5, bool_4)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    str_6 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_6 = module_0.AnchorLink(str_6, str_6, str_6)
    assert anchor_link_6.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_6.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_6.level == "\x0cdW+v0'pk+\"T7x\t"
    str_7 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_7 = module_0.AnchorLink(str_7, str_7, bool_5)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.level is True
    list_2 = [anchor_link_7, anchor_link_7, anchor_link_7, anchor_link_7]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_2 = table_of_contents_2.__len__()
    int_3 = table_of_contents_2.__len__()
    list_3 = []
    table_of_contents_3 = module_0.get_toc(list_3)
    assert (
        f"{type(table_of_contents_3).__module__}.{type(table_of_contents_3).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_3) == 0
    var_1 = table_of_contents_3.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    str_8 = var_4.__str__()
    str_9 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_8 = module_0.AnchorLink(str_9, str_9, bool_6)
    assert anchor_link_8.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.level is True
    list_4 = [anchor_link_8, anchor_link_8, anchor_link_8, anchor_link_8]
    table_of_contents_4 = module_0.TableOfContents(list_4)
    int_4 = table_of_contents_4.__len__()
    var_5 = table_of_contents_4.__iter__()
    str_10 = var_5.__str__()
    str_11 = var_5.__str__()
    str_12 = "0zd.=TZe`Q}Iz"
    bool_7 = True
    anchor_link_9 = module_0.AnchorLink(str_12, str_12, bool_7)
    assert anchor_link_9.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.level is True
    toc_token_1 = module_0._TocToken()
    str_13 = anchor_link_6.__str__()
    assert str_13 == "\x0cdW+v0'pk+\"T7x\t - #\x0cdW+v0'pk+\"T7x\t\n"


def test_case_25():
    str_0 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, str_0)
    assert anchor_link_0.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.level == "\x0cdW+v0'pk+\"T7x\t"
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    table_of_contents_0 = module_0.TableOfContents(str_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 15
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_1 = var_3.__str__()


def test_case_26():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    str_2 = var_0.__str__()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_3, str_3, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_1 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    var_1 = table_of_contents_1.__iter__()
    str_4 = var_1.__str__()
    str_5 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_5, str_5, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_2 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_2 = table_of_contents_2.__len__()
    int_3 = table_of_contents_2.__len__()
    table_of_contents_3 = module_0.TableOfContents(list_2)


def test_case_27():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    str_2 = var_0.__str__()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_3, str_3, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_1 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    int_2 = table_of_contents_1.__len__()
    str_4 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_2 = module_0.AnchorLink(str_4, str_4, str_4)
    assert anchor_link_2.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_2.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_2.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_2 = module_0.TableOfContents(str_4)
    var_1 = table_of_contents_2.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    str_5 = var_4.__str__()
    str_6 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_6, str_6, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    list_2 = [anchor_link_3, anchor_link_3, anchor_link_3, anchor_link_3]
    table_of_contents_3 = module_0.TableOfContents(list_2)
    int_3 = table_of_contents_3.__len__()
    int_4 = table_of_contents_2.__len__()


def test_case_28():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    str_2 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_3 = module_0.AnchorLink(str_1, toc_token_0, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == {}
    assert anchor_link_3.level is True
    str_3 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_3, str_3, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    list_0 = [anchor_link_4, anchor_link_4, anchor_link_4, anchor_link_4]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    str_4 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_5 = module_0.AnchorLink(str_4, str_4, str_4)
    assert anchor_link_5.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_5.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_5.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_1 = module_0.TableOfContents(str_4)
    var_0 = table_of_contents_1.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_5 = var_3.__str__()
    list_1 = []
    table_of_contents_2 = module_0.get_toc(list_1)
    assert (
        f"{type(table_of_contents_2).__module__}.{type(table_of_contents_2).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_2) == 0
    var_4 = table_of_contents_2.__iter__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    str_6 = var_7.__str__()
    str_7 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_6 = module_0.AnchorLink(str_7, str_7, bool_4)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    list_2 = [anchor_link_6, anchor_link_6, anchor_link_6, anchor_link_6]
    table_of_contents_3 = module_0.TableOfContents(list_2)
    int_1 = table_of_contents_3.__len__()
    var_8 = table_of_contents_3.__iter__()
    str_8 = var_8.__str__()
    str_9 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_7 = module_0.AnchorLink(str_9, str_9, bool_5)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.level is True
    toc_token_1 = module_0._TocToken()
    str_10 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_8 = module_0.AnchorLink(str_10, str_10, str_10)
    assert anchor_link_8.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_8.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_8.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_4 = module_0.TableOfContents(var_3)


def test_case_29():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, str_1)
    assert anchor_link_1.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_0 = module_0.TableOfContents(str_1)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 15
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_2 = var_3.__str__()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_0 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_1 = module_0.TableOfContents(list_0)
    int_0 = table_of_contents_1.__len__()
    var_4 = table_of_contents_1.__iter__()
    str_4 = var_4.__str__()
    str_5 = var_4.__str__()
    list_1 = []
    table_of_contents_2 = module_0.get_toc(list_1)
    assert (
        f"{type(table_of_contents_2).__module__}.{type(table_of_contents_2).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_2) == 0
    var_5 = table_of_contents_2.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    str_6 = var_8.__str__()
    str_7 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_7, str_7, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    list_2 = [anchor_link_3, anchor_link_3, anchor_link_3, anchor_link_3]
    table_of_contents_3 = module_0.TableOfContents(list_2)
    int_1 = table_of_contents_3.__len__()
    int_2 = table_of_contents_3.__len__()
    str_8 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_4 = module_0.AnchorLink(str_8, str_8, str_8)
    assert anchor_link_4.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_4.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_4.level == "\x0cdW+v0'pk+\"T7x\t"
    str_9 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_5 = module_0.AnchorLink(str_9, str_9, bool_3)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    list_3 = [anchor_link_5, anchor_link_5, anchor_link_5, anchor_link_5]
    table_of_contents_4 = module_0.TableOfContents(list_3)
    int_3 = table_of_contents_4.__len__()
    str_10 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_6 = module_0.AnchorLink(str_10, str_10, bool_4)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    toc_token_0 = module_0._TocToken()
    str_11 = var_3.__str__()


def test_case_30():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    int_1 = table_of_contents_0.__len__()
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_1 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_2 = table_of_contents_1.__len__()
    var_0 = table_of_contents_1.__iter__()
    str_2 = var_0.__str__()
    int_3 = 162
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, int_3)
    assert anchor_link_2.level == 162


def test_case_31():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    int_1 = table_of_contents_0.__len__()
    list_1 = []
    table_of_contents_1 = module_0.get_toc(list_1)
    assert (
        f"{type(table_of_contents_1).__module__}.{type(table_of_contents_1).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_1) == 0
    var_0 = table_of_contents_1.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_1 = var_3.__str__()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_2, str_2, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_2 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_2 = table_of_contents_2.__len__()
    var_4 = table_of_contents_2.__iter__()
    str_3 = var_4.__str__()
    str_4 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_2 = module_0.AnchorLink(str_4, str_4, str_4)
    assert anchor_link_2.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_2.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_2.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_3 = module_0.TableOfContents(str_4)
    var_5 = table_of_contents_3.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    str_5 = var_8.__str__()
    str_6 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_6, str_6, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    list_3 = [anchor_link_3, anchor_link_3, anchor_link_3, anchor_link_3]
    table_of_contents_4 = module_0.TableOfContents(list_3)
    int_3 = table_of_contents_4.__len__()
    var_9 = table_of_contents_4.__iter__()
    str_7 = var_9.__str__()
    str_8 = var_9.__str__()
    str_9 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_4 = module_0.AnchorLink(str_9, str_9, str_9)
    assert anchor_link_4.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_4.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_4.level == "\x0cdW+v0'pk+\"T7x\t"
    str_10 = anchor_link_4.__str__()
    assert str_10 == "\x0cdW+v0'pk+\"T7x\t - #\x0cdW+v0'pk+\"T7x\t\n"


def test_case_32():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    str_2 = var_0.__str__()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_3, str_3, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_1 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    int_2 = table_of_contents_1.__len__()
    str_4 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_4, str_4, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    toc_token_0 = module_0._TocToken()
    str_5 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_3 = module_0.AnchorLink(str_5, str_5, bool_3)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    list_2 = [anchor_link_3, anchor_link_3, anchor_link_3, anchor_link_3]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_3 = table_of_contents_2.__len__()
    var_1 = table_of_contents_2.__iter__()
    str_6 = var_1.__str__()
    str_7 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_4 = module_0.AnchorLink(str_7, str_7, bool_4)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    str_8 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_5 = module_0.AnchorLink(str_8, str_8, str_8)
    assert anchor_link_5.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_5.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_5.level == "\x0cdW+v0'pk+\"T7x\t"
    str_9 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_6 = module_0.AnchorLink(str_9, str_9, str_9)
    assert anchor_link_6.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_6.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_6.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_3 = module_0.TableOfContents(str_9)
    var_2 = table_of_contents_3.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    str_10 = var_5.__str__()
    str_11 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_7 = module_0.AnchorLink(str_11, str_11, bool_5)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.level is True
    str_12 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_8 = module_0.AnchorLink(str_12, str_12, bool_6)
    assert anchor_link_8.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.level is True
    toc_token_1 = module_0._TocToken()
    anchor_link_9 = module_0.AnchorLink(str_11, toc_token_1, bool_6)
    assert anchor_link_9.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.id == {}
    assert anchor_link_9.level is True
    str_13 = anchor_link_3.__str__()
    assert str_13 == "0zd.=TZe`Q}Iz - #0zd.=TZe`Q}Iz\n"


def test_case_33():
    str_0 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, str_0)
    assert anchor_link_0.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.level == "\x0cdW+v0'pk+\"T7x\t"
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    table_of_contents_0 = module_0.TableOfContents(str_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 15
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_1 = var_3.__str__()
    str_2 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_1 = module_0.AnchorLink(str_2, str_2, str_2)
    assert anchor_link_1.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.level == "\x0cdW+v0'pk+\"T7x\t"
    str_3 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, bool_0)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    toc_token_0 = module_0._TocToken()
    str_4 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_3 = module_0.AnchorLink(str_4, str_4, bool_1)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    str_5 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_4 = module_0.AnchorLink(str_5, str_5, bool_2)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    toc_token_1 = module_0._TocToken()
    anchor_link_5 = module_0.AnchorLink(str_4, toc_token_1, bool_2)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == {}
    assert anchor_link_5.level is True
    iterator_0 = var_1.__iter__()


def test_case_34():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    str_2 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_3 = module_0.AnchorLink(str_1, toc_token_0, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == {}
    assert anchor_link_3.level is True
    str_3 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_3, str_3, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    list_0 = [anchor_link_4, anchor_link_4, anchor_link_4, anchor_link_4]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    int_1 = table_of_contents_0.__len__()
    str_4 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_5 = module_0.AnchorLink(str_4, str_4, bool_4)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    list_1 = [anchor_link_5, anchor_link_5, anchor_link_5, anchor_link_5]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_2 = table_of_contents_1.__len__()
    var_0 = table_of_contents_1.__iter__()
    str_5 = var_0.__str__()
    str_6 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_6 = module_0.AnchorLink(str_6, str_6, bool_5)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    list_2 = [anchor_link_6, anchor_link_6, anchor_link_6, anchor_link_6]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_3 = table_of_contents_2.__len__()
    str_7 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_7 = module_0.AnchorLink(str_7, str_7, str_7)
    assert anchor_link_7.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_7.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_7.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_3 = module_0.TableOfContents(str_7)
    var_1 = table_of_contents_3.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    str_8 = var_4.__str__()
    toc_token_1 = module_0._TocToken(**toc_token_0)


def test_case_35():
    list_0 = []
    table_of_contents_0 = module_0.get_toc(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 0
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_0 = var_3.__str__()
    str_1 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_1, str_1, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_1 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_0 = table_of_contents_1.__len__()
    int_1 = table_of_contents_1.__len__()
    str_2 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_1 = module_0.AnchorLink(str_2, str_2, str_2)
    assert anchor_link_1.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.level == "\x0cdW+v0'pk+\"T7x\t"
    str_3 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    toc_token_0 = module_0._TocToken()
    str_4 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_4, str_4, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    str_5 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_5, str_5, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    str_6 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_5 = module_0.AnchorLink(str_6, str_6, bool_4)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    toc_token_1 = module_0._TocToken()
    anchor_link_6 = module_0.AnchorLink(str_5, toc_token_1, bool_4)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == {}
    assert anchor_link_6.level is True
    str_7 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_7 = module_0.AnchorLink(str_7, str_7, bool_5)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.level is True
    list_2 = [anchor_link_7, anchor_link_7, anchor_link_7, anchor_link_7]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_2 = table_of_contents_2.__len__()
    var_4 = table_of_contents_2.__iter__()
    str_8 = var_4.__str__()
    str_9 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_8 = module_0.AnchorLink(str_9, str_9, str_9)
    assert anchor_link_8.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_8.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_8.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_3 = module_0.TableOfContents(str_9)
    var_5 = table_of_contents_3.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    str_10 = var_8.__str__()
    str_11 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_9 = module_0.AnchorLink(str_11, str_11, bool_6)
    assert anchor_link_9.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.level is True
    list_3 = [anchor_link_9, anchor_link_9, anchor_link_9, anchor_link_9]
    table_of_contents_4 = module_0.TableOfContents(list_3)
    int_3 = table_of_contents_4.__len__()
    str_12 = "0zd.=TZe`Q}Iz"
    bool_7 = True
    anchor_link_10 = module_0.AnchorLink(str_12, str_12, bool_7)
    assert anchor_link_10.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_10.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_10.level is True
    list_4 = [anchor_link_10, anchor_link_10, anchor_link_10, anchor_link_10]
    table_of_contents_5 = module_0.TableOfContents(list_4)
    int_4 = table_of_contents_5.__len__()
    var_9 = table_of_contents_5.__iter__()
    str_13 = var_9.__str__()
    str_14 = var_9.__str__()
    str_15 = var_0.__str__()


def test_case_36():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    toc_token_0 = module_0._TocToken()
    list_0 = []
    table_of_contents_0 = module_0.get_toc(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 0
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_1 = var_3.__str__()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_2, str_2, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    str_3 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    toc_token_1 = module_0._TocToken()
    anchor_link_3 = module_0.AnchorLink(str_2, toc_token_1, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == {}
    assert anchor_link_3.level is True
    str_4 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_4, str_4, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    list_1 = [anchor_link_4, anchor_link_4, anchor_link_4, anchor_link_4]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_0 = table_of_contents_1.__len__()
    var_4 = table_of_contents_1.__iter__()
    str_5 = var_4.__str__()
    str_6 = var_4.__str__()
    str_7 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_5 = module_0.AnchorLink(str_7, str_7, bool_4)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    list_2 = [anchor_link_5, anchor_link_5, anchor_link_5, anchor_link_5]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_1 = table_of_contents_2.__len__()
    str_8 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_6 = module_0.AnchorLink(str_8, str_8, str_8)
    assert anchor_link_6.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_6.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_6.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_3 = module_0.TableOfContents(str_8)
    var_5 = table_of_contents_3.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    str_9 = var_8.__str__()
    str_10 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_7 = module_0.AnchorLink(str_10, str_10, bool_5)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.level is True
    str_11 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_8 = module_0.AnchorLink(str_11, str_11, bool_6)
    assert anchor_link_8.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.level is True
    list_3 = [anchor_link_8, anchor_link_8, anchor_link_8, anchor_link_8]
    table_of_contents_4 = module_0.TableOfContents(list_3)
    int_2 = table_of_contents_4.__len__()
    var_9 = table_of_contents_4.__iter__()
    str_12 = var_9.__str__()
    str_13 = anchor_link_2.__str__()
    assert str_13 == "0zd.=TZe`Q}Iz - #0zd.=TZe`Q}Iz\n"


def test_case_37():
    str_0 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, str_0)
    assert anchor_link_0.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.level == "\x0cdW+v0'pk+\"T7x\t"
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, str_1)
    assert anchor_link_1.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_0 = module_0.TableOfContents(str_1)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 15
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_2 = var_3.__str__()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, bool_0)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_0 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_1 = module_0.TableOfContents(list_0)
    int_0 = table_of_contents_1.__len__()
    var_4 = table_of_contents_1.__iter__()
    str_4 = var_4.__str__()
    str_5 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_3 = module_0.AnchorLink(str_5, str_5, bool_1)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    list_1 = [anchor_link_3, anchor_link_3, anchor_link_3, anchor_link_3]
    table_of_contents_2 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_2.__len__()
    var_5 = table_of_contents_2.__iter__()
    str_6 = var_5.__str__()
    str_7 = var_5.__str__()
    str_8 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_4 = module_0.AnchorLink(str_8, str_8, bool_2)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    list_2 = []
    table_of_contents_3 = module_0.get_toc(list_2)
    assert (
        f"{type(table_of_contents_3).__module__}.{type(table_of_contents_3).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_3) == 0
    var_6 = table_of_contents_3.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    str_9 = var_9.__str__()
    str_10 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_5 = module_0.AnchorLink(str_10, str_10, bool_3)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    str_11 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_6 = module_0.AnchorLink(str_11, str_11, bool_4)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_7 = module_0.AnchorLink(str_10, toc_token_0, bool_4)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == {}
    assert anchor_link_7.level is True
    str_12 = var_3.__str__()


def test_case_38():
    str_0 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, str_0)
    assert anchor_link_0.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.level == "\x0cdW+v0'pk+\"T7x\t"
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    table_of_contents_0 = module_0.TableOfContents(str_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 15
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_1 = var_3.__str__()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_1 = module_0.AnchorLink(str_2, str_2, bool_0)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    toc_token_0 = module_0._TocToken()
    str_3 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, str_3)
    assert anchor_link_2.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_2.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_2.level == "\x0cdW+v0'pk+\"T7x\t"
    str_4 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_3 = module_0.AnchorLink(str_4, str_4, bool_1)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    str_5 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_4 = module_0.AnchorLink(str_5, str_5, bool_2)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    list_0 = [anchor_link_4, anchor_link_4, anchor_link_4, anchor_link_4]
    table_of_contents_1 = module_0.TableOfContents(list_0)
    int_0 = table_of_contents_1.__len__()
    str_6 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_5 = module_0.AnchorLink(str_6, str_6, bool_3)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    str_7 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_6 = module_0.AnchorLink(str_7, str_7, bool_4)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    toc_token_1 = module_0._TocToken()
    anchor_link_7 = module_0.AnchorLink(str_6, toc_token_1, bool_4)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == {}
    assert anchor_link_7.level is True
    str_8 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_8 = module_0.AnchorLink(str_8, str_8, bool_5)
    assert anchor_link_8.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.level is True
    list_1 = [anchor_link_8, anchor_link_8, anchor_link_8, anchor_link_8]
    table_of_contents_2 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_2.__len__()
    var_4 = table_of_contents_2.__iter__()
    str_9 = var_4.__str__()
    str_10 = var_4.__str__()
    str_11 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_9 = module_0.AnchorLink(str_11, str_11, bool_6)
    assert anchor_link_9.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.level is True
    list_2 = [anchor_link_9, anchor_link_9, anchor_link_9, anchor_link_9]
    table_of_contents_3 = module_0.TableOfContents(list_2)
    int_2 = table_of_contents_3.__len__()
    var_5 = table_of_contents_3.__iter__()
    str_12 = var_5.__str__()
    list_3 = []
    table_of_contents_4 = module_0.get_toc(list_3)
    assert (
        f"{type(table_of_contents_4).__module__}.{type(table_of_contents_4).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_4) == 0
    var_6 = table_of_contents_4.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    str_13 = var_9.__str__()
    str_14 = var_9.__str__()


def test_case_39():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_2, str_2, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    str_3 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_3 = module_0.AnchorLink(str_2, toc_token_0, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == {}
    assert anchor_link_3.level is True
    anchor_link_4 = module_0.AnchorLink(table_of_contents_0, list_0, var_0)
    assert (
        f"{type(anchor_link_4.title).__module__}.{type(anchor_link_4.title).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(anchor_link_4.title) == 4
    assert (
        f"{type(anchor_link_4.id).__module__}.{type(anchor_link_4.id).__qualname__}"
        == "builtins.list"
    )
    assert len(anchor_link_4.id) == 4
    assert (
        f"{type(anchor_link_4.level).__module__}.{type(anchor_link_4.level).__qualname__}"
        == "builtins.list_iterator"
    )


def test_case_40():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_1 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    int_2 = table_of_contents_1.__len__()
    anchor_link_2 = module_0.AnchorLink(
        anchor_link_0, anchor_link_1, table_of_contents_1
    )
    assert (
        f"{type(anchor_link_2.title).__module__}.{type(anchor_link_2.title).__qualname__}"
        == "mkdocs.structure.toc.AnchorLink"
    )
    assert (
        f"{type(anchor_link_2.id).__module__}.{type(anchor_link_2.id).__qualname__}"
        == "mkdocs.structure.toc.AnchorLink"
    )
    assert (
        f"{type(anchor_link_2.level).__module__}.{type(anchor_link_2.level).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(anchor_link_2.level) == 4


def test_case_41():
    list_0 = []
    table_of_contents_0 = module_0.get_toc(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 0
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_0 = var_3.__str__()
    str_1 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_1, str_1, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    toc_token_0 = module_0._TocToken()
    str_2 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_1 = module_0.AnchorLink(str_2, str_2, str_2)
    assert anchor_link_1.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_1 = module_0.TableOfContents(var_1)


def test_case_42():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    list_1 = []
    table_of_contents_1 = module_0.get_toc(list_1)
    assert (
        f"{type(table_of_contents_1).__module__}.{type(table_of_contents_1).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_1) == 0
    var_1 = table_of_contents_1.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    str_2 = var_4.__str__()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_3, str_3, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    str_4 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_4, str_4, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_2 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_1 = table_of_contents_2.__len__()
    var_5 = table_of_contents_2.__iter__()
    str_5 = var_5.__str__()
    str_6 = var_5.__str__()
    toc_token_0 = module_0._TocToken(*var_3)


def test_case_43():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, str_1)
    assert anchor_link_1.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_0 = module_0.TableOfContents(str_1)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 15
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_2 = var_3.__str__()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_0 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_1 = module_0.TableOfContents(list_0)
    int_0 = table_of_contents_1.__len__()
    var_4 = table_of_contents_1.__iter__()
    str_4 = var_4.__str__()
    str_5 = var_4.__str__()
    table_of_contents_2 = module_0.TableOfContents(str_2)


def test_case_44():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    toc_token_0 = module_0._TocToken()
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_0 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_2 = var_0.__str__()
    str_3 = var_0.__str__()
    str_4 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_4, str_4, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_1 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    var_1 = table_of_contents_1.__iter__()
    str_5 = var_1.__str__()
    str_6 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_3 = module_0.AnchorLink(str_6, str_6, str_6)
    assert anchor_link_3.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_3.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_3.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_2 = module_0.TableOfContents(str_6)
    var_2 = table_of_contents_2.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    str_7 = var_5.__str__()
    str_8 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_8, str_8, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    list_2 = [anchor_link_4, anchor_link_4, anchor_link_4, anchor_link_4]
    table_of_contents_3 = module_0.TableOfContents(list_2)
    int_2 = table_of_contents_3.__len__()
    list_3 = []
    table_of_contents_4 = module_0.get_toc(list_3)
    assert (
        f"{type(table_of_contents_4).__module__}.{type(table_of_contents_4).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_4) == 0
    var_6 = table_of_contents_4.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    str_9 = var_9.__str__()
    str_10 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_5 = module_0.AnchorLink(str_10, str_10, bool_4)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    iterator_0 = table_of_contents_3.__iter__()


def test_case_45():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_2 = module_0.AnchorLink(str_0, toc_token_0, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == {}
    assert anchor_link_2.level is True
    str_2 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_3 = module_0.AnchorLink(str_2, str_2, str_2)
    assert anchor_link_3.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_3.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_3.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_0 = module_0.TableOfContents(str_2)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 15
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_3 = var_3.__str__()
    str_4 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_4 = module_0.AnchorLink(str_4, str_4, str_4)
    assert anchor_link_4.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_4.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_4.level == "\x0cdW+v0'pk+\"T7x\t"
    str_5 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_5 = module_0.AnchorLink(str_5, str_5, bool_2)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    list_0 = [anchor_link_5, anchor_link_5, anchor_link_5, anchor_link_5]
    table_of_contents_1 = module_0.TableOfContents(list_0)
    int_0 = table_of_contents_1.__len__()
    str_6 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_6 = module_0.AnchorLink(str_6, str_6, bool_3)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    str_7 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_7 = module_0.AnchorLink(str_7, str_7, bool_4)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.level is True
    list_1 = [anchor_link_7, anchor_link_7, anchor_link_7, anchor_link_7]
    table_of_contents_2 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_2.__len__()
    var_4 = table_of_contents_2.__iter__()
    str_8 = var_4.__str__()
    str_9 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_8 = module_0.AnchorLink(str_9, str_9, bool_5)
    assert anchor_link_8.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.level is True
    toc_token_1 = module_0._TocToken()
    str_10 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_9 = module_0.AnchorLink(str_10, str_10, bool_6)
    assert anchor_link_9.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.level is True
    list_2 = [anchor_link_9, anchor_link_9, anchor_link_9, anchor_link_9]
    table_of_contents_3 = module_0.TableOfContents(list_2)
    int_2 = table_of_contents_3.__len__()
    var_5 = table_of_contents_3.__iter__()
    str_11 = var_5.__str__()
    str_12 = var_5.__str__()
    str_13 = "0zd.=TZe`Q}Iz"
    bool_7 = True
    anchor_link_10 = module_0.AnchorLink(str_13, str_13, bool_7)
    assert anchor_link_10.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_10.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_10.level is True
    list_3 = [anchor_link_10, anchor_link_10, anchor_link_10, anchor_link_10]
    table_of_contents_4 = module_0.TableOfContents(list_3)
    int_3 = table_of_contents_4.__len__()
    int_4 = table_of_contents_4.__len__()
    var_6 = table_of_contents_3.__iter__()
    iterator_0 = var_6.__iter__()


def test_case_46():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    int_1 = table_of_contents_0.__len__()
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_1 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_2 = table_of_contents_1.__len__()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_2 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_3 = table_of_contents_2.__len__()
    var_0 = table_of_contents_2.__iter__()
    str_3 = var_0.__str__()
    str_4 = var_0.__str__()
    str_5 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_3 = module_0.AnchorLink(str_5, str_5, bool_3)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    str_6 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_4 = module_0.AnchorLink(str_6, str_6, bool_4)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_5 = module_0.AnchorLink(str_5, toc_token_0, bool_4)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == {}
    assert anchor_link_5.level is True
    str_7 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_6 = module_0.AnchorLink(str_7, str_7, str_7)
    assert anchor_link_6.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_6.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_6.level == "\x0cdW+v0'pk+\"T7x\t"
    list_3 = []
    table_of_contents_3 = module_0.get_toc(list_3)
    assert (
        f"{type(table_of_contents_3).__module__}.{type(table_of_contents_3).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_3) == 0
    var_1 = table_of_contents_3.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    str_8 = var_4.__str__()
    str_9 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_7 = module_0.AnchorLink(str_9, str_9, str_9)
    assert anchor_link_7.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_7.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_7.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_4 = module_0.TableOfContents(str_9)
    var_5 = table_of_contents_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    str_10 = var_8.__str__()
    str_11 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_8 = module_0.AnchorLink(str_11, str_11, bool_5)
    assert anchor_link_8.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.level is True
    toc_token_1 = module_0._TocToken()
    str_12 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_9 = module_0.AnchorLink(str_12, str_12, bool_6)
    assert anchor_link_9.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.level is True
    str_13 = "0zd.=TZe`Q}Iz"
    bool_7 = True
    anchor_link_10 = module_0.AnchorLink(str_13, str_13, bool_7)
    assert anchor_link_10.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_10.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_10.level is True
    list_4 = [anchor_link_10, anchor_link_10, anchor_link_10, anchor_link_10]
    table_of_contents_5 = module_0.TableOfContents(list_4)
    int_4 = table_of_contents_5.__len__()
    var_9 = table_of_contents_5.__iter__()
    str_14 = var_9.__str__()
    str_15 = table_of_contents_0.__str__()
    assert (
        str_15
        == "0zd.=TZe`Q}Iz - #0zd.=TZe`Q}Iz\n0zd.=TZe`Q}Iz - #0zd.=TZe`Q}Iz\n0zd.=TZe`Q}Iz - #0zd.=TZe`Q}Iz\n0zd.=TZe`Q}Iz - #0zd.=TZe`Q}Iz\n"
    )


def test_case_47():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_2 = module_0.AnchorLink(str_0, toc_token_0, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == {}
    assert anchor_link_2.level is True
    str_2 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_2, str_2, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    toc_token_1 = module_0._TocToken()
    str_3 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_4 = module_0.AnchorLink(str_3, str_3, str_3)
    assert anchor_link_4.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_4.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_4.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_0 = module_0.TableOfContents(str_3)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 15
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_4 = var_3.__str__()
    str_5 = var_3.__str__()


def test_case_48():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_2 = module_0.AnchorLink(str_0, toc_token_0, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == {}
    assert anchor_link_2.level is True
    str_2 = "C{yL|D"
    anchor_link_3 = module_0.AnchorLink(anchor_link_1, str_2, bool_0)
    assert (
        f"{type(anchor_link_3.title).__module__}.{type(anchor_link_3.title).__qualname__}"
        == "mkdocs.structure.toc.AnchorLink"
    )
    assert anchor_link_3.id == "C{yL|D"
    assert anchor_link_3.level is True


def test_case_49():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    toc_token_0 = module_0._TocToken()
    list_0 = []
    table_of_contents_0 = module_0.get_toc(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 0
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_2 = var_3.__str__()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_1 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_0 = table_of_contents_1.__len__()
    int_1 = table_of_contents_1.__len__()
    str_4 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_3 = module_0.AnchorLink(str_4, str_4, str_4)
    assert anchor_link_3.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_3.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_3.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_2 = module_0.TableOfContents(str_4)
    var_4 = table_of_contents_2.__iter__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    str_5 = var_7.__str__()
    str_6 = var_0.__str__()


def test_case_50():
    str_0 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, str_0)
    assert anchor_link_0.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.level == "\x0cdW+v0'pk+\"T7x\t"
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_0)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    toc_token_0 = module_0._TocToken()
    str_2 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, str_2)
    assert anchor_link_2.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_2.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_2.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_0 = module_0.TableOfContents(str_2)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 15
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_3 = var_3.__str__()
    str_4 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_3 = module_0.AnchorLink(str_4, str_4, bool_1)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    list_0 = [anchor_link_3, anchor_link_3, anchor_link_3, anchor_link_3]
    table_of_contents_1 = module_0.TableOfContents(list_0)
    int_0 = table_of_contents_1.__len__()
    int_1 = table_of_contents_1.__len__()
    str_5 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_4 = module_0.AnchorLink(str_5, str_5, bool_2)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    str_6 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_5 = module_0.AnchorLink(str_6, str_6, bool_3)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    list_1 = [anchor_link_5, anchor_link_5, anchor_link_5, anchor_link_5]
    table_of_contents_2 = module_0.TableOfContents(list_1)
    int_2 = table_of_contents_2.__len__()
    list_2 = [var_2, anchor_link_0, var_3]
    table_of_contents_3 = module_0.TableOfContents(list_2)


def test_case_51():
    str_0 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, str_0)
    assert anchor_link_0.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.level == "\x0cdW+v0'pk+\"T7x\t"
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_0)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    str_2 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_3 = module_0.AnchorLink(str_1, toc_token_0, bool_1)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == {}
    assert anchor_link_3.level is True
    str_3 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_4 = module_0.AnchorLink(str_3, str_3, bool_2)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    list_0 = [anchor_link_4, anchor_link_4, anchor_link_4, anchor_link_4]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    int_1 = table_of_contents_0.__len__()
    str_4 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_5 = module_0.AnchorLink(str_4, str_4, str_4)
    assert anchor_link_5.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_5.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_5.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_1 = module_0.TableOfContents(str_4)
    var_0 = table_of_contents_1.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_5 = var_3.__str__()
    list_1 = []
    table_of_contents_2 = module_0.get_toc(list_1)
    assert (
        f"{type(table_of_contents_2).__module__}.{type(table_of_contents_2).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_2) == 0
    var_4 = table_of_contents_2.__iter__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    str_6 = var_7.__str__()
    str_7 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_6 = module_0.AnchorLink(str_7, str_7, bool_3)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    toc_token_1 = module_0._TocToken()


def test_case_52():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    str_2 = var_0.__str__()
    str_3 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_1 = module_0.AnchorLink(str_3, str_3, str_3)
    assert anchor_link_1.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.level == "\x0cdW+v0'pk+\"T7x\t"
    str_4 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_2 = module_0.AnchorLink(str_4, str_4, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_1 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    var_1 = table_of_contents_1.__iter__()
    str_5 = var_1.__str__()
    str_6 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_6, str_6, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    toc_token_0 = module_0._TocToken()
    str_7 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_7, str_7, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    list_2 = [anchor_link_4, anchor_link_4, anchor_link_4, anchor_link_4]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_2 = table_of_contents_2.__len__()
    int_3 = table_of_contents_2.__len__()
    str_8 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_5 = module_0.AnchorLink(str_8, str_8, bool_4)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    list_3 = []
    table_of_contents_3 = module_0.get_toc(list_3)
    assert (
        f"{type(table_of_contents_3).__module__}.{type(table_of_contents_3).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_3) == 0
    var_2 = table_of_contents_3.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    str_9 = var_5.__str__()
    str_10 = table_of_contents_2.__str__()
    assert (
        str_10
        == "0zd.=TZe`Q}Iz - #0zd.=TZe`Q}Iz\n0zd.=TZe`Q}Iz - #0zd.=TZe`Q}Iz\n0zd.=TZe`Q}Iz - #0zd.=TZe`Q}Iz\n0zd.=TZe`Q}Iz - #0zd.=TZe`Q}Iz\n"
    )


def test_case_53():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = []
    table_of_contents_0 = module_0.get_toc(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 0
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_1 = var_3.__str__()
    str_2 = "Sv'7*)}D7l$"
    int_0 = 454
    anchor_link_1 = module_0.AnchorLink(var_2, str_2, int_0)
    assert (
        f"{type(anchor_link_1.title).__module__}.{type(anchor_link_1.title).__qualname__}"
        == "builtins.list_iterator"
    )
    assert anchor_link_1.id == "Sv'7*)}D7l$"
    assert anchor_link_1.level == 454


def test_case_54():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_2 = module_0.AnchorLink(str_0, toc_token_0, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == {}
    assert anchor_link_2.level is True
    str_2 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_2, str_2, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    list_0 = [anchor_link_3, anchor_link_3, anchor_link_3, anchor_link_3]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    int_1 = table_of_contents_0.__len__()
    str_3 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_4 = module_0.AnchorLink(str_3, str_3, str_3)
    assert anchor_link_4.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_4.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_4.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_1 = module_0.TableOfContents(str_3)
    var_0 = table_of_contents_1.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_4 = var_3.__str__()
    str_5 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_5 = module_0.AnchorLink(str_5, str_5, str_5)
    assert anchor_link_5.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_5.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_5.level == "\x0cdW+v0'pk+\"T7x\t"
    str_6 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_6 = module_0.AnchorLink(str_6, str_6, bool_3)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    list_1 = []
    table_of_contents_2 = module_0.get_toc(list_1)
    assert (
        f"{type(table_of_contents_2).__module__}.{type(table_of_contents_2).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_2) == 0
    var_4 = table_of_contents_2.__iter__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    str_7 = var_7.__str__()
    str_8 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_7 = module_0.AnchorLink(str_8, str_8, bool_4)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.level is True
    list_2 = [anchor_link_7, anchor_link_7, anchor_link_7, anchor_link_7]
    table_of_contents_3 = module_0.TableOfContents(list_2)
    int_2 = table_of_contents_3.__len__()
    str_9 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_8 = module_0.AnchorLink(str_9, str_9, bool_5)
    assert anchor_link_8.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.level is True
    list_3 = [anchor_link_8, anchor_link_8, anchor_link_8, anchor_link_8]
    table_of_contents_4 = module_0.TableOfContents(list_3)
    int_3 = table_of_contents_4.__len__()
    var_8 = table_of_contents_4.__iter__()
    str_10 = var_8.__str__()
    str_11 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_9 = module_0.AnchorLink(str_11, str_11, bool_6)
    assert anchor_link_9.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.level is True
    toc_token_1 = module_0._TocToken()
    str_12 = "0zd.=TZe`Q}Iz"
    bool_7 = True
    anchor_link_10 = module_0.AnchorLink(str_12, str_12, bool_7)
    assert anchor_link_10.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_10.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_10.level is True
    list_4 = [anchor_link_10, anchor_link_10, anchor_link_10, anchor_link_10]
    table_of_contents_5 = module_0.TableOfContents(list_4)
    int_4 = table_of_contents_5.__len__()
    var_9 = table_of_contents_5.__iter__()
    str_13 = var_9.__str__()
    str_14 = var_9.__str__()
    iterator_0 = var_1.__iter__()


def test_case_55():
    list_0 = []
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 0


def test_case_56():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_1 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    int_2 = table_of_contents_1.__len__()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    str_3 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_3 = module_0.AnchorLink(str_3, str_3, str_3)
    assert anchor_link_3.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_3.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_3.level == "\x0cdW+v0'pk+\"T7x\t"
    str_4 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_4, str_4, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    toc_token_0 = module_0._TocToken()
    list_2 = []
    table_of_contents_2 = module_0.get_toc(list_2)
    assert (
        f"{type(table_of_contents_2).__module__}.{type(table_of_contents_2).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_2) == 0
    var_0 = table_of_contents_2.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_5 = var_3.__str__()
    str_6 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_5 = module_0.AnchorLink(str_6, str_6, bool_4)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    list_3 = [anchor_link_5, anchor_link_5, anchor_link_5, anchor_link_5]
    table_of_contents_3 = module_0.TableOfContents(list_3)
    int_3 = table_of_contents_3.__len__()
    var_4 = table_of_contents_3.__iter__()
    str_7 = var_4.__str__()
    str_8 = var_4.__str__()
    str_9 = 'Ms\rDTs"Kv!xM=FQW'
    anchor_link_6 = module_0.AnchorLink(str_1, str_9, str_0)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == 'Ms\rDTs"Kv!xM=FQW'
    assert anchor_link_6.level == "0zd.=TZe`Q}Iz"


def test_case_57():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    toc_token_0 = module_0._TocToken()
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_0 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_1 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    var_0 = table_of_contents_1.__iter__()
    str_3 = var_0.__str__()
    str_4 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_3 = module_0.AnchorLink(str_4, str_4, str_4)
    assert anchor_link_3.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_3.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_3.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_2 = module_0.TableOfContents(str_4)
    var_1 = table_of_contents_2.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    str_5 = var_4.__str__()
    str_6 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_6, str_6, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    str_7 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_5 = module_0.AnchorLink(str_7, str_7, bool_4)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    list_2 = [anchor_link_5, anchor_link_5, anchor_link_5, anchor_link_5]
    table_of_contents_3 = module_0.TableOfContents(list_2)
    int_2 = table_of_contents_3.__len__()
    var_5 = table_of_contents_3.__iter__()
    str_8 = var_5.__str__()
    str_9 = var_5.__str__()
    str_10 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_6 = module_0.AnchorLink(str_10, str_10, bool_5)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    str_11 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_7 = module_0.AnchorLink(str_11, str_11, bool_6)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.level is True
    toc_token_1 = module_0._TocToken()
    anchor_link_8 = module_0.AnchorLink(str_10, toc_token_1, bool_6)
    assert anchor_link_8.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.id == {}
    assert anchor_link_8.level is True
    str_12 = var_4.__str__()


def test_case_58():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_1 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    int_2 = table_of_contents_1.__len__()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_2 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_3 = table_of_contents_2.__len__()
    var_0 = table_of_contents_2.__iter__()
    str_3 = var_0.__str__()
    str_4 = var_0.__str__()
    list_3 = []
    table_of_contents_3 = module_0.get_toc(list_3)
    assert (
        f"{type(table_of_contents_3).__module__}.{type(table_of_contents_3).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_3) == 0
    var_1 = table_of_contents_3.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    str_5 = var_4.__str__()
    str_6 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_3 = module_0.AnchorLink(str_6, str_6, bool_3)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    str_7 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_4 = module_0.AnchorLink(str_7, str_7, bool_4)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_5 = module_0.AnchorLink(str_6, toc_token_0, bool_4)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == {}
    assert anchor_link_5.level is True
    str_8 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_6 = module_0.AnchorLink(str_8, str_8, bool_5)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    str_9 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_7 = module_0.AnchorLink(str_9, str_9, str_9)
    assert anchor_link_7.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_7.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_7.level == "\x0cdW+v0'pk+\"T7x\t"
    str_10 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_8 = module_0.AnchorLink(str_10, str_10, bool_6)
    assert anchor_link_8.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.level is True
    toc_token_1 = module_0._TocToken()
    str_11 = "0zd.=TZe`Q}Iz"
    bool_7 = True
    anchor_link_9 = module_0.AnchorLink(str_11, str_11, bool_7)
    assert anchor_link_9.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.level is True
    list_4 = [anchor_link_9, anchor_link_9, anchor_link_9, anchor_link_9]
    table_of_contents_4 = module_0.TableOfContents(list_4)
    int_4 = table_of_contents_4.__len__()
    var_5 = table_of_contents_4.__iter__()
    str_12 = var_5.__str__()
    str_13 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_10 = module_0.AnchorLink(str_13, str_13, str_13)
    assert anchor_link_10.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_10.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_10.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_5 = module_0.TableOfContents(str_13)
    var_6 = table_of_contents_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    str_14 = var_9.__str__()
    str_15 = var_5.__str__()


def test_case_59():
    str_0 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, str_0)
    assert anchor_link_0.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.level == "\x0cdW+v0'pk+\"T7x\t"
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    table_of_contents_0 = module_0.TableOfContents(str_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 15
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_1 = var_3.__str__()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_1 = module_0.AnchorLink(str_2, str_2, bool_0)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_0 = []
    table_of_contents_1 = module_0.get_toc(list_0)
    assert (
        f"{type(table_of_contents_1).__module__}.{type(table_of_contents_1).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_1) == 0
    var_4 = table_of_contents_1.__iter__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    str_3 = var_7.__str__()
    str_4 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_2 = module_0.AnchorLink(str_4, str_4, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_1 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_2 = module_0.TableOfContents(list_1)
    int_0 = table_of_contents_2.__len__()
    var_8 = table_of_contents_2.__iter__()
    str_5 = var_8.__str__()
    str_6 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_6, str_6, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    toc_token_0 = module_0._TocToken()
    str_7 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_7, str_7, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    list_2 = [anchor_link_4, anchor_link_4, anchor_link_4, anchor_link_4]
    table_of_contents_3 = module_0.TableOfContents(list_2)
    int_1 = table_of_contents_3.__len__()
    int_2 = table_of_contents_3.__len__()
    str_8 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_5 = module_0.AnchorLink(str_8, str_8, bool_4)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    list_3 = [anchor_link_5, anchor_link_5, anchor_link_5, anchor_link_5]
    table_of_contents_4 = module_0.TableOfContents(list_3)
    int_3 = table_of_contents_4.__len__()
    var_9 = table_of_contents_4.__iter__()
    str_9 = var_9.__str__()
    str_10 = var_9.__str__()
    str_11 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_6 = module_0.AnchorLink(str_11, str_11, bool_5)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    list_4 = [anchor_link_6, anchor_link_6, anchor_link_6, anchor_link_6]
    table_of_contents_5 = module_0.TableOfContents(list_4)
    int_4 = table_of_contents_5.__len__()
    str_12 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_7 = module_0.AnchorLink(str_12, str_12, bool_6)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.level is True
    str_13 = "0zd.=TZe`Q}Iz"
    bool_7 = True
    anchor_link_8 = module_0.AnchorLink(str_13, str_13, bool_7)
    assert anchor_link_8.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.level is True
    toc_token_1 = module_0._TocToken()
    anchor_link_9 = module_0.AnchorLink(str_12, toc_token_1, bool_7)
    assert anchor_link_9.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.id == {}
    assert anchor_link_9.level is True
    list_5 = []
    table_of_contents_6 = module_0.TableOfContents(list_5)
    str_14 = var_8.__str__()


def test_case_60():
    str_0 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, str_0)
    assert anchor_link_0.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.level == "\x0cdW+v0'pk+\"T7x\t"
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    table_of_contents_0 = module_0.TableOfContents(str_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 15
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_1 = var_3.__str__()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_1 = module_0.AnchorLink(str_2, str_2, bool_0)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_0 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_1 = module_0.TableOfContents(list_0)
    int_0 = table_of_contents_1.__len__()
    int_1 = table_of_contents_1.__len__()
    list_1 = []
    table_of_contents_2 = module_0.TableOfContents(list_1)
    str_3 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    str_4 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_4, str_4, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_4 = module_0.AnchorLink(str_3, toc_token_0, bool_2)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == {}
    assert anchor_link_4.level is True
    str_5 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_5 = module_0.AnchorLink(str_5, str_5, bool_3)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    toc_token_1 = module_0._TocToken()
    str_6 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_6 = module_0.AnchorLink(str_6, str_6, bool_4)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    list_2 = [anchor_link_6, anchor_link_6, anchor_link_6, anchor_link_6]
    table_of_contents_3 = module_0.TableOfContents(list_2)
    int_2 = table_of_contents_3.__len__()
    var_4 = table_of_contents_3.__iter__()
    str_7 = var_4.__str__()
    str_8 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_7 = module_0.AnchorLink(str_8, str_8, bool_5)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.level is True
    list_3 = [anchor_link_7, anchor_link_7, anchor_link_7, anchor_link_7]
    table_of_contents_4 = module_0.TableOfContents(list_3)
    int_3 = table_of_contents_4.__len__()
    var_5 = table_of_contents_4.__iter__()
    str_9 = var_5.__str__()
    str_10 = var_5.__str__()
    table_of_contents_5 = module_0.TableOfContents(anchor_link_6)


def test_case_61():
    str_0 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, str_0)
    assert anchor_link_0.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.level == "\x0cdW+v0'pk+\"T7x\t"
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_0)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    toc_token_0 = module_0._TocToken()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_0 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    int_1 = table_of_contents_0.__len__()
    list_1 = []
    table_of_contents_1 = module_0.TableOfContents(list_1)
    str_3 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_3 = module_0.AnchorLink(str_3, str_3, str_3)
    assert anchor_link_3.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_3.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_3.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_2 = module_0.TableOfContents(str_3)
    var_0 = table_of_contents_2.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_4 = var_3.__str__()
    iterator_0 = var_3.__iter__()


def test_case_62():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_2, str_2, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    toc_token_0 = module_0._TocToken()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_1 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    table_of_contents_2 = module_0.TableOfContents(str_0)
    str_4 = table_of_contents_2.__str__()
    assert str_4 == "0zd.=TZe`Q}Iz"


def test_case_63():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_2 = module_0.AnchorLink(str_0, toc_token_0, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == {}
    assert anchor_link_2.level is True
    list_0 = []
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 0
    str_2 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_3 = module_0.AnchorLink(str_2, str_2, str_2)
    assert anchor_link_3.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_3.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_3.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_1 = module_0.TableOfContents(str_2)
    var_0 = table_of_contents_1.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_3 = var_3.__str__()
    str_4 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_4 = module_0.AnchorLink(str_4, str_4, str_4)
    assert anchor_link_4.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_4.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_4.level == "\x0cdW+v0'pk+\"T7x\t"
    str_5 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_5 = module_0.AnchorLink(str_5, str_5, bool_2)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    list_1 = [anchor_link_5, anchor_link_5, anchor_link_5, anchor_link_5]
    table_of_contents_2 = module_0.TableOfContents(list_1)
    int_0 = table_of_contents_2.__len__()
    str_6 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_6 = module_0.AnchorLink(str_6, str_6, bool_3)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    list_2 = [anchor_link_6, anchor_link_6, anchor_link_6, anchor_link_6]
    table_of_contents_3 = module_0.TableOfContents(list_2)
    int_1 = table_of_contents_3.__len__()
    var_4 = table_of_contents_3.__iter__()
    str_7 = var_4.__str__()
    int_2 = table_of_contents_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_64():
    bool_0 = False
    module_0.get_toc(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    list_0 = []
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 0
    var_0 = table_of_contents_0.__iter__()
    var_0.indent_print()


@pytest.mark.xfail(strict=True)
def test_case_66():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    module_0.get_toc(anchor_link_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    bool_0 = True
    str_0 = "'->X"
    str_1 = "The zero-based level of the item."
    str_2 = "mkdocs_theme.yml"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.Generic(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    none_type_0 = None
    table_of_contents_0 = module_0.TableOfContents(none_type_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert table_of_contents_0.items is None
    table_of_contents_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_69():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_70():
    str_0 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, str_0)
    assert anchor_link_0.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.level == "\x0cdW+v0'pk+\"T7x\t"
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_0)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_0 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_2 = var_0.__str__()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    str_4 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_4, str_4, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_4 = module_0.AnchorLink(str_3, toc_token_0, bool_2)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == {}
    assert anchor_link_4.level is True
    str_5 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_5 = module_0.AnchorLink(str_5, str_5, bool_3)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    toc_token_1 = module_0._TocToken()
    list_1 = []
    table_of_contents_1 = module_0.get_toc(list_1)
    assert (
        f"{type(table_of_contents_1).__module__}.{type(table_of_contents_1).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_1) == 0
    var_1 = table_of_contents_1.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    str_6 = var_4.__str__()
    var_1.indent_print()


@pytest.mark.xfail(strict=True)
def test_case_71():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_2, str_2, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_1 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    var_1 = table_of_contents_1.__iter__()
    str_3 = var_1.__str__()
    str_4 = var_1.__str__()
    list_2 = []
    table_of_contents_2 = module_0.get_toc(list_2)
    assert (
        f"{type(table_of_contents_2).__module__}.{type(table_of_contents_2).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_2) == 0
    var_2 = table_of_contents_2.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    str_5 = var_5.__str__()
    str_6 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_6, str_6, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    toc_token_0 = module_0._TocToken()
    str_7 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_3 = module_0.AnchorLink(str_7, str_7, bool_3)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    str_8 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_4 = module_0.AnchorLink(str_8, str_8, str_8)
    assert anchor_link_4.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_4.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_4.level == "\x0cdW+v0'pk+\"T7x\t"
    var_5.__len__()


@pytest.mark.xfail(strict=True)
def test_case_72():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    str_2 = var_0.__str__()
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_73():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    str_2 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_3 = module_0.AnchorLink(str_1, toc_token_0, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == {}
    assert anchor_link_3.level is True
    str_3 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_3, str_3, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    toc_token_1 = module_0._TocToken()
    str_4 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_5 = module_0.AnchorLink(str_4, str_4, bool_4)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    list_1 = [anchor_link_5, anchor_link_5, anchor_link_5, anchor_link_5]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    var_0 = table_of_contents_1.__iter__()
    str_5 = var_0.__str__()
    str_6 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_6 = module_0.AnchorLink(str_6, str_6, str_6)
    assert anchor_link_6.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_6.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_6.level == "\x0cdW+v0'pk+\"T7x\t"
    list_2 = []
    table_of_contents_2 = module_0.get_toc(list_2)
    assert (
        f"{type(table_of_contents_2).__module__}.{type(table_of_contents_2).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_2) == 0
    var_1 = table_of_contents_2.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    str_7 = var_4.__str__()
    str_8 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_7 = module_0.AnchorLink(str_8, str_8, bool_5)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.level is True
    table_of_contents_3 = module_0.TableOfContents(var_2)
    table_of_contents_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_74():
    str_0 = "!"
    bytes_0 = b"\x7f'\x1f"
    str_1 = "-,mT1o"
    str_2 = "`"
    str_3 = "Based on your CNAME file, your documentation should be available shortly at: http://"
    dict_0 = {str_0: bytes_0, str_1: bytes_0, str_2: bytes_0, str_3: str_2}
    module_1.Generic(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    str_2 = var_0.__str__()
    str_3 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_1 = module_0.AnchorLink(str_3, str_3, str_3)
    assert anchor_link_1.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.level == "\x0cdW+v0'pk+\"T7x\t"
    str_4 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_2 = module_0.AnchorLink(str_4, str_4, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_1 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    list_2 = []
    table_of_contents_2 = module_0.get_toc(list_2)
    assert (
        f"{type(table_of_contents_2).__module__}.{type(table_of_contents_2).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_2) == 0
    var_1 = table_of_contents_2.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    str_5 = var_4.__str__()
    str_6 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_6, str_6, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    str_7 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_7, str_7, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    list_3 = [anchor_link_4, anchor_link_4, anchor_link_4, anchor_link_4]
    table_of_contents_3 = module_0.TableOfContents(list_3)
    int_2 = table_of_contents_3.__len__()
    int_3 = table_of_contents_3.__len__()
    str_8 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_5 = module_0.AnchorLink(str_8, str_8, bool_4)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    str_9 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_6 = module_0.AnchorLink(str_9, str_9, bool_5)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_7 = module_0.AnchorLink(str_8, toc_token_0, bool_5)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == {}
    assert anchor_link_7.level is True
    str_10 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_8 = module_0.AnchorLink(str_10, str_10, bool_6)
    assert anchor_link_8.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.level is True
    list_4 = [anchor_link_8, anchor_link_8, anchor_link_8, anchor_link_8]
    table_of_contents_4 = module_0.TableOfContents(list_4)
    int_4 = table_of_contents_4.__len__()
    var_5 = table_of_contents_4.__iter__()
    str_11 = var_5.__str__()
    anchor_link_7.__str__()


@pytest.mark.xfail(strict=True)
def test_case_76():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    int_1 = table_of_contents_0.__len__()
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    str_2 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_1 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_2 = table_of_contents_1.__len__()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_3 = module_0.AnchorLink(str_3, str_3, bool_3)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    str_4 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_4 = module_0.AnchorLink(str_4, str_4, bool_4)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_5 = module_0.AnchorLink(str_3, toc_token_0, bool_4)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == {}
    assert anchor_link_5.level is True
    str_5 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_6 = module_0.AnchorLink(str_5, str_5, str_5)
    assert anchor_link_6.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_6.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_6.level == "\x0cdW+v0'pk+\"T7x\t"
    list_2 = []
    table_of_contents_2 = module_0.get_toc(list_2)
    assert (
        f"{type(table_of_contents_2).__module__}.{type(table_of_contents_2).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_2) == 0
    var_0 = table_of_contents_2.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_6 = var_3.__str__()
    str_7 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_7 = module_0.AnchorLink(str_7, str_7, bool_5)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.level is True
    list_3 = [anchor_link_7, anchor_link_7, anchor_link_7, anchor_link_7]
    table_of_contents_3 = module_0.TableOfContents(list_3)
    int_3 = table_of_contents_3.__len__()
    var_4 = table_of_contents_3.__iter__()
    str_8 = var_4.__str__()
    str_9 = var_4.__str__()
    str_10 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_8 = module_0.AnchorLink(str_10, str_10, bool_6)
    assert anchor_link_8.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.level is True
    list_4 = [anchor_link_8, anchor_link_8, anchor_link_8, anchor_link_8]
    table_of_contents_4 = module_0.TableOfContents(list_4)
    int_4 = table_of_contents_4.__len__()
    var_5 = table_of_contents_4.__iter__()
    str_11 = var_5.__str__()
    module_0._TocToken(*var_5, **str_5)


@pytest.mark.xfail(strict=True)
def test_case_77():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    int_1 = table_of_contents_0.__len__()
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_1 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_2 = table_of_contents_1.__len__()
    var_0 = table_of_contents_1.__iter__()
    str_2 = var_0.__str__()
    str_3 = var_0.__str__()
    str_4 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_4, str_4, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_2 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_3 = table_of_contents_2.__len__()
    var_1 = table_of_contents_2.__iter__()
    str_5 = var_1.__str__()
    str_6 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_3 = module_0.AnchorLink(str_6, str_6, bool_3)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    toc_token_0 = module_0._TocToken()
    list_3 = []
    table_of_contents_3 = module_0.get_toc(list_3)
    assert (
        f"{type(table_of_contents_3).__module__}.{type(table_of_contents_3).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_3) == 0
    var_2 = table_of_contents_3.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    str_7 = var_5.__str__()
    str_8 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_4 = module_0.AnchorLink(str_8, str_8, bool_4)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    str_9 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_5 = module_0.AnchorLink(str_9, str_9, str_9)
    assert anchor_link_5.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_5.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_5.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_4 = module_0.TableOfContents(str_9)
    var_6 = table_of_contents_4.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    str_10 = var_9.__str__()
    module_0.get_toc(int_1)


@pytest.mark.xfail(strict=True)
def test_case_78():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_2 = module_0.AnchorLink(str_0, toc_token_0, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == {}
    assert anchor_link_2.level is True
    str_2 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_2, str_2, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    list_0 = [anchor_link_3, anchor_link_3, anchor_link_3, anchor_link_3]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    int_1 = table_of_contents_0.__len__()
    list_1 = []
    table_of_contents_1 = module_0.get_toc(list_1)
    assert (
        f"{type(table_of_contents_1).__module__}.{type(table_of_contents_1).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_1) == 0
    var_0 = table_of_contents_1.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_3 = var_3.__str__()
    str_4 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_4, str_4, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    toc_token_1 = module_0._TocToken()
    str_5 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_5 = module_0.AnchorLink(str_5, str_5, bool_4)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    list_2 = [anchor_link_5, anchor_link_5, anchor_link_5, anchor_link_5]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_2 = table_of_contents_2.__len__()
    var_4 = table_of_contents_2.__iter__()
    str_6 = var_4.__str__()
    str_7 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_6 = module_0.AnchorLink(str_7, str_7, str_7)
    assert anchor_link_6.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_6.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_6.level == "\x0cdW+v0'pk+\"T7x\t"
    str_8 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_7 = module_0.AnchorLink(str_8, str_8, bool_5)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.level is True
    list_3 = [anchor_link_7, anchor_link_7, anchor_link_7, anchor_link_7]
    table_of_contents_3 = module_0.TableOfContents(list_3)
    int_3 = table_of_contents_3.__len__()
    str_9 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_8 = module_0.AnchorLink(str_9, str_9, str_9)
    assert anchor_link_8.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_8.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_8.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_4 = module_0.TableOfContents(str_9)
    var_5 = table_of_contents_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    str_10 = var_8.__str__()
    str_11 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_9 = module_0.AnchorLink(str_11, str_11, bool_6)
    assert anchor_link_9.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.level is True
    list_4 = [anchor_link_9, anchor_link_9, anchor_link_9, anchor_link_9]
    table_of_contents_5 = module_0.TableOfContents(list_4)
    int_4 = table_of_contents_5.__len__()
    var_9 = table_of_contents_5.__iter__()
    str_12 = var_9.__str__()
    str_13 = var_9.__str__()
    module_0.get_toc(list_4)


@pytest.mark.xfail(strict=True)
def test_case_79():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_2, str_2, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    toc_token_0 = module_0._TocToken()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_1 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    int_2 = table_of_contents_1.__len__()
    var_0.indent_print()


@pytest.mark.xfail(strict=True)
def test_case_80():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    int_1 = table_of_contents_0.__len__()
    str_1 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, str_1)
    assert anchor_link_1.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_1 = module_0.TableOfContents(str_1)
    var_0 = table_of_contents_1.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_2 = var_3.__str__()
    list_1 = [var_3]
    module_0._TocToken(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_81():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_2, str_2, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_1 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_2 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_2 = table_of_contents_2.__len__()
    var_1 = table_of_contents_2.__iter__()
    str_4 = var_1.__str__()
    str_5 = var_1.__str__()
    str_6 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_3 = module_0.AnchorLink(str_6, str_6, bool_3)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    toc_token_0 = module_0._TocToken()
    str_7 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_4 = module_0.AnchorLink(str_7, str_7, str_7)
    assert anchor_link_4.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_4.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_4.level == "\x0cdW+v0'pk+\"T7x\t"
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_82():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_0 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    int_1 = table_of_contents_0.__len__()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_1 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_2 = table_of_contents_1.__len__()
    module_0.get_toc(int_2)


@pytest.mark.xfail(strict=True)
def test_case_83():
    str_0 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, str_0)
    assert anchor_link_0.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.level == "\x0cdW+v0'pk+\"T7x\t"
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    table_of_contents_0 = module_0.TableOfContents(str_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 15
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_1 = var_3.__str__()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_1 = module_0.AnchorLink(str_2, str_2, bool_0)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_0 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_1 = module_0.TableOfContents(list_0)
    int_0 = table_of_contents_1.__len__()
    var_4 = table_of_contents_1.__iter__()
    str_3 = var_4.__str__()
    str_4 = var_4.__str__()
    str_5 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_2 = module_0.AnchorLink(str_5, str_5, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    str_6 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_6, str_6, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_4 = module_0.AnchorLink(str_5, toc_token_0, bool_2)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == {}
    assert anchor_link_4.level is True
    str_7 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_5 = module_0.AnchorLink(str_7, str_7, bool_3)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    list_1 = [anchor_link_5, anchor_link_5, anchor_link_5, anchor_link_5]
    table_of_contents_2 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_2.__len__()
    var_5 = table_of_contents_2.__iter__()
    str_8 = var_5.__str__()
    str_9 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_6 = module_0.AnchorLink(str_9, str_9, bool_4)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    str_10 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_7 = module_0.AnchorLink(str_10, str_10, str_10)
    assert anchor_link_7.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_7.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_7.level == "\x0cdW+v0'pk+\"T7x\t"
    str_11 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_8 = module_0.AnchorLink(str_11, str_11, bool_5)
    assert anchor_link_8.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.level is True
    list_2 = [anchor_link_8, anchor_link_8, anchor_link_8, anchor_link_8]
    table_of_contents_3 = module_0.TableOfContents(list_2)
    int_2 = table_of_contents_3.__len__()
    str_12 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_9 = module_0.AnchorLink(str_12, str_12, bool_6)
    assert anchor_link_9.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.level is True
    list_3 = [anchor_link_9, anchor_link_9, anchor_link_9, anchor_link_9]
    table_of_contents_4 = module_0.TableOfContents(list_3)
    int_3 = table_of_contents_4.__len__()
    int_4 = table_of_contents_4.__len__()
    list_4 = []
    table_of_contents_5 = module_0.get_toc(list_4)
    assert (
        f"{type(table_of_contents_5).__module__}.{type(table_of_contents_5).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_5) == 0
    var_6 = table_of_contents_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    str_13 = var_9.__str__()
    str_14 = "0zd.=TZe`Q}Iz"
    bool_7 = True
    anchor_link_10 = module_0.AnchorLink(str_14, str_14, bool_7)
    assert anchor_link_10.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_10.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_10.level is True
    toc_token_1 = module_0._TocToken()
    module_0._TocToken(*str_7)


@pytest.mark.xfail(strict=True)
def test_case_84():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    str_2 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_3 = module_0.AnchorLink(str_1, toc_token_0, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == {}
    assert anchor_link_3.level is True
    list_1 = []
    table_of_contents_1 = module_0.get_toc(list_1)
    assert (
        f"{type(table_of_contents_1).__module__}.{type(table_of_contents_1).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_1) == 0
    var_0 = table_of_contents_1.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_3 = var_3.__str__()
    anchor_link_3.indent_print(var_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    str_0 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, str_0)
    assert anchor_link_0.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.level == "\x0cdW+v0'pk+\"T7x\t"
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_0)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_0 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    int_1 = table_of_contents_0.__len__()
    str_2 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, str_2)
    assert anchor_link_2.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_2.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_2.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_1 = module_0.TableOfContents(str_2)
    var_0 = table_of_contents_1.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_3 = var_3.__str__()
    str_4 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_3 = module_0.AnchorLink(str_4, str_4, bool_1)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    list_1 = [anchor_link_3, anchor_link_3, anchor_link_3, anchor_link_3]
    table_of_contents_2 = module_0.TableOfContents(list_1)
    int_2 = table_of_contents_2.__len__()
    str_5 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_4 = module_0.AnchorLink(str_5, str_5, bool_2)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    list_2 = [anchor_link_4, anchor_link_4, anchor_link_4, anchor_link_4]
    table_of_contents_3 = module_0.TableOfContents(list_2)
    int_3 = table_of_contents_3.__len__()
    var_4 = table_of_contents_3.__iter__()
    str_6 = var_4.__str__()
    str_7 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_5 = module_0.AnchorLink(str_7, str_7, bool_3)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    list_3 = [anchor_link_5, anchor_link_5, anchor_link_5, anchor_link_5]
    table_of_contents_4 = module_0.TableOfContents(list_3)
    int_4 = table_of_contents_4.__len__()
    var_5 = table_of_contents_4.__iter__()
    str_8 = var_5.__str__()
    str_9 = var_5.__str__()
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_86():
    str_0 = ";I0*<+y#ZpPMk&*+%^l"
    bool_0 = True
    dict_0 = {str_0: bool_0}
    toc_token_0 = module_0._TocToken(**dict_0)
    list_0 = []
    table_of_contents_0 = module_0.get_toc(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 0
    var_0 = table_of_contents_0.__iter__()
    list_1 = [var_0, var_0, var_0]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    var_1 = table_of_contents_1.__iter__()
    var_2 = var_1.__iter__()
    list_2 = [toc_token_0, var_2]
    module_0.get_toc(list_2)


@pytest.mark.xfail(strict=True)
def test_case_87():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    toc_token_0 = module_0._TocToken()
    str_1 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    str_2 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, str_2)
    assert anchor_link_2.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_2.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_2.level == "\x0cdW+v0'pk+\"T7x\t"
    str_3 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_3, str_3, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    str_4 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_4, str_4, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    toc_token_1 = module_0._TocToken()
    anchor_link_5 = module_0.AnchorLink(str_3, toc_token_1, bool_3)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == {}
    assert anchor_link_5.level is True
    anchor_link_3.indent_print(anchor_link_3)


@pytest.mark.xfail(strict=True)
def test_case_88():
    str_0 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, str_0)
    assert anchor_link_0.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.level == "\x0cdW+v0'pk+\"T7x\t"
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_0)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_0 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_2 = var_0.__str__()
    str_3 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_2 = module_0.AnchorLink(str_3, str_3, str_3)
    assert anchor_link_2.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_2.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_2.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_1 = module_0.TableOfContents(str_3)
    var_1 = table_of_contents_1.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    str_4 = var_4.__str__()
    str_5 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_3 = module_0.AnchorLink(str_5, str_5, bool_1)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    str_6 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_4 = module_0.AnchorLink(str_6, str_6, bool_2)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    list_1 = [anchor_link_4, anchor_link_4, anchor_link_4, anchor_link_4]
    table_of_contents_2 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_2.__len__()
    int_2 = table_of_contents_2.__len__()
    str_7 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_5 = module_0.AnchorLink(str_7, str_7, bool_3)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    str_8 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_6 = module_0.AnchorLink(str_8, str_8, bool_4)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_7 = module_0.AnchorLink(str_7, toc_token_0, bool_4)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == {}
    assert anchor_link_7.level is True
    str_9 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_8 = module_0.AnchorLink(str_9, str_9, bool_5)
    assert anchor_link_8.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.level is True
    list_2 = [anchor_link_8, anchor_link_8, anchor_link_8, anchor_link_8]
    table_of_contents_3 = module_0.TableOfContents(list_2)
    int_3 = table_of_contents_3.__len__()
    str_10 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_9 = module_0.AnchorLink(str_10, str_10, bool_6)
    assert anchor_link_9.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.level is True
    toc_token_1 = module_0._TocToken()
    anchor_link_7.indent_print()


@pytest.mark.xfail(strict=True)
def test_case_89():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, str_1)
    assert anchor_link_1.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_1.level == "\x0cdW+v0'pk+\"T7x\t"
    str_2 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_0 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_3, str_3, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    list_1 = [anchor_link_3, anchor_link_3, anchor_link_3, anchor_link_3]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    int_2 = table_of_contents_1.__len__()
    str_4 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_4 = module_0.AnchorLink(str_4, str_4, bool_3)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    list_2 = [anchor_link_4, anchor_link_4, anchor_link_4, anchor_link_4]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_3 = table_of_contents_2.__len__()
    var_0 = table_of_contents_2.__iter__()
    str_5 = var_0.__str__()
    str_6 = var_0.__str__()
    str_7 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_5 = module_0.AnchorLink(str_7, str_7, bool_4)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    str_8 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_6 = module_0.AnchorLink(str_8, str_8, bool_5)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_7 = module_0.AnchorLink(str_7, toc_token_0, bool_5)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == {}
    assert anchor_link_7.level is True
    list_3 = []
    table_of_contents_3 = module_0.get_toc(list_3)
    assert (
        f"{type(table_of_contents_3).__module__}.{type(table_of_contents_3).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_3) == 0
    var_1 = table_of_contents_3.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    str_9 = var_4.__str__()
    module_0.get_toc(var_0)


@pytest.mark.xfail(strict=True)
def test_case_90():
    bool_0 = False
    module_0.get_toc(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_91():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    str_2 = var_0.__str__()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_1 = module_0.AnchorLink(str_3, str_3, bool_1)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_1 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_1 = module_0.TableOfContents(list_1)
    int_1 = table_of_contents_1.__len__()
    int_2 = table_of_contents_1.__len__()
    str_4 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_2 = module_0.AnchorLink(str_4, str_4, bool_2)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_2 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_2 = module_0.TableOfContents(list_2)
    int_3 = table_of_contents_2.__len__()
    var_1 = table_of_contents_2.__iter__()
    str_5 = var_1.__str__()
    list_3 = []
    table_of_contents_3 = module_0.get_toc(list_3)
    assert (
        f"{type(table_of_contents_3).__module__}.{type(table_of_contents_3).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_3) == 0
    var_2 = table_of_contents_3.__iter__()
    var_3 = var_2.__iter__()
    var_4 = var_3.__iter__()
    var_5 = var_4.__iter__()
    str_6 = var_5.__str__()
    str_7 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_3 = module_0.AnchorLink(str_7, str_7, bool_3)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    toc_token_0 = module_0._TocToken()
    str_8 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_4 = module_0.AnchorLink(str_8, str_8, bool_4)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.level is True
    str_9 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_5 = module_0.AnchorLink(str_9, str_9, bool_5)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    list_4 = [anchor_link_5, anchor_link_5, anchor_link_5, anchor_link_5]
    table_of_contents_4 = module_0.TableOfContents(list_4)
    int_4 = table_of_contents_4.__len__()
    str_10 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_6 = module_0.AnchorLink(str_10, str_10, str_10)
    assert anchor_link_6.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_6.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_6.level == "\x0cdW+v0'pk+\"T7x\t"
    str_11 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_7 = module_0.AnchorLink(str_11, str_11, str_11)
    assert anchor_link_7.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_7.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_7.level == "\x0cdW+v0'pk+\"T7x\t"
    table_of_contents_5 = module_0.TableOfContents(str_11)
    var_6 = table_of_contents_5.__iter__()
    var_7 = var_6.__iter__()
    var_8 = var_7.__iter__()
    var_9 = var_8.__iter__()
    str_12 = var_9.__str__()
    str_13 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_8 = module_0.AnchorLink(str_13, str_13, bool_6)
    assert anchor_link_8.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.level is True
    str_14 = "0zd.=TZe`Q}Iz"
    bool_7 = True
    anchor_link_9 = module_0.AnchorLink(str_14, str_14, bool_7)
    assert anchor_link_9.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_9.level is True
    toc_token_1 = module_0._TocToken()
    anchor_link_10 = module_0.AnchorLink(str_13, toc_token_1, bool_7)
    assert anchor_link_10.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_10.id == {}
    assert anchor_link_10.level is True
    module_0._TocToken(**var_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    str_0 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, str_0)
    assert anchor_link_0.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.level == "\x0cdW+v0'pk+\"T7x\t"
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    str_1 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_1 = module_0.AnchorLink(str_1, str_1, bool_0)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    toc_token_0 = module_0._TocToken()
    str_2 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_2 = module_0.AnchorLink(str_2, str_2, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    list_0 = [anchor_link_2, anchor_link_2, anchor_link_2, anchor_link_2]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    module_0.get_toc(table_of_contents_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    list_0 = []
    table_of_contents_0 = module_0.get_toc(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 0
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_0 = var_3.__str__()
    str_1 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_0 = module_0.AnchorLink(str_1, str_1, str_1)
    assert anchor_link_0.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_0.level == "\x0cdW+v0'pk+\"T7x\t"
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    table_of_contents_1 = module_0.TableOfContents(str_1)
    var_4 = table_of_contents_1.__iter__()
    var_5 = var_4.__iter__()
    var_6 = var_5.__iter__()
    var_7 = var_6.__iter__()
    str_2 = var_7.__str__()
    str_3 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_1 = module_0.AnchorLink(str_3, str_3, bool_0)
    assert anchor_link_1.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_1.level is True
    list_1 = [anchor_link_1, anchor_link_1, anchor_link_1, anchor_link_1]
    table_of_contents_2 = module_0.TableOfContents(list_1)
    int_0 = table_of_contents_2.__len__()
    var_8 = table_of_contents_2.__iter__()
    str_4 = var_8.__str__()
    str_5 = var_8.__str__()
    str_6 = "0zd.=TZe`Q}Iz"
    bool_1 = True
    anchor_link_2 = module_0.AnchorLink(str_6, str_6, bool_1)
    assert anchor_link_2.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_2.level is True
    str_7 = "0zd.=TZe`Q}Iz"
    bool_2 = True
    anchor_link_3 = module_0.AnchorLink(str_7, str_7, bool_2)
    assert anchor_link_3.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_3.level is True
    toc_token_0 = module_0._TocToken()
    anchor_link_4 = module_0.AnchorLink(str_6, toc_token_0, bool_2)
    assert anchor_link_4.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_4.id == {}
    assert anchor_link_4.level is True
    str_8 = "0zd.=TZe`Q}Iz"
    bool_3 = True
    anchor_link_5 = module_0.AnchorLink(str_8, str_8, bool_3)
    assert anchor_link_5.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_5.level is True
    str_9 = "0zd.=TZe`Q}Iz"
    bool_4 = True
    anchor_link_6 = module_0.AnchorLink(str_9, str_9, bool_4)
    assert anchor_link_6.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_6.level is True
    list_2 = [anchor_link_6, anchor_link_6, anchor_link_6, anchor_link_6]
    table_of_contents_3 = module_0.TableOfContents(list_2)
    int_1 = table_of_contents_3.__len__()
    var_9 = table_of_contents_3.__iter__()
    str_10 = var_9.__str__()
    str_11 = "0zd.=TZe`Q}Iz"
    bool_5 = True
    anchor_link_7 = module_0.AnchorLink(str_11, str_11, bool_5)
    assert anchor_link_7.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_7.level is True
    toc_token_1 = module_0._TocToken()
    str_12 = "0zd.=TZe`Q}Iz"
    bool_6 = True
    anchor_link_8 = module_0.AnchorLink(str_12, str_12, bool_6)
    assert anchor_link_8.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_8.level is True
    list_3 = [anchor_link_8, anchor_link_8, anchor_link_8, anchor_link_8]
    table_of_contents_4 = module_0.TableOfContents(list_3)
    int_2 = table_of_contents_4.__len__()
    int_3 = table_of_contents_4.__len__()
    str_13 = "\x0cdW+v0'pk+\"T7x\t"
    anchor_link_9 = module_0.AnchorLink(str_13, str_13, str_13)
    assert anchor_link_9.title == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_9.id == "\x0cdW+v0'pk+\"T7x\t"
    assert anchor_link_9.level == "\x0cdW+v0'pk+\"T7x\t"
    str_14 = "0zd.=TZe`Q}Iz"
    bool_7 = True
    anchor_link_10 = module_0.AnchorLink(str_14, str_14, bool_7)
    assert anchor_link_10.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_10.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_10.level is True
    list_4 = [anchor_link_10, anchor_link_10, anchor_link_10, anchor_link_10]
    table_of_contents_5 = module_0.TableOfContents(list_4)
    int_4 = table_of_contents_5.__len__()
    module_0.get_toc(var_6)


@pytest.mark.xfail(strict=True)
def test_case_94():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    toc_token_0 = module_0._TocToken()
    list_0 = []
    table_of_contents_0 = module_0.get_toc(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 0
    var_0 = table_of_contents_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_1.__iter__()
    var_3 = var_2.__iter__()
    str_1 = var_3.__str__()
    list_1 = []
    table_of_contents_1 = module_0.TableOfContents(list_1)
    var_3.indent_print()


@pytest.mark.xfail(strict=True)
def test_case_95():
    str_0 = "0zd.=TZe`Q}Iz"
    bool_0 = True
    anchor_link_0 = module_0.AnchorLink(str_0, str_0, bool_0)
    assert anchor_link_0.title == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.id == "0zd.=TZe`Q}Iz"
    assert anchor_link_0.level is True
    assert (
        f"{type(module_0.AnchorLink.url).__module__}.{type(module_0.AnchorLink.url).__qualname__}"
        == "builtins.property"
    )
    list_0 = [anchor_link_0, anchor_link_0, anchor_link_0, anchor_link_0]
    table_of_contents_0 = module_0.TableOfContents(list_0)
    assert (
        f"{type(table_of_contents_0).__module__}.{type(table_of_contents_0).__qualname__}"
        == "mkdocs.structure.toc.TableOfContents"
    )
    assert len(table_of_contents_0) == 4
    int_0 = table_of_contents_0.__len__()
    var_0 = table_of_contents_0.__iter__()
    str_1 = var_0.__str__()
    module_0.get_toc(var_0)
