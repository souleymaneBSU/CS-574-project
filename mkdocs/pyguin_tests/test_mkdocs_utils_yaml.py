# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import re as module_0
import mkdocs.utils.yaml as module_1
import mkdocs.exceptions as module_2


def test_case_0():
    var_0 = module_0.purge()
    relative_dir_placeholder_0 = module_1.RelativeDirPlaceholder(var_0)
    assert (
        f"{type(relative_dir_placeholder_0).__module__}.{type(relative_dir_placeholder_0).__qualname__}"
        == "mkdocs.utils.yaml.RelativeDirPlaceholder"
    )
    assert relative_dir_placeholder_0.config is None
    assert relative_dir_placeholder_0.suffix == ""


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'l,4}0"8BoxNp'
    module_1.yaml_load(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "#),N^foJUT"
    none_type_0 = None
    dir_placeholder_0 = module_1._DirPlaceholder(none_type_0)
    assert (
        f"{type(dir_placeholder_0).__module__}.{type(dir_placeholder_0).__qualname__}"
        == "mkdocs.utils.yaml._DirPlaceholder"
    )
    assert dir_placeholder_0.config is None
    assert dir_placeholder_0.suffix == ""
    module_1.yaml_load(str_0, str_0)


def test_case_3():
    none_type_0 = None
    dir_placeholder_0 = module_1._DirPlaceholder(none_type_0)
    assert (
        f"{type(dir_placeholder_0).__module__}.{type(dir_placeholder_0).__qualname__}"
        == "mkdocs.utils.yaml._DirPlaceholder"
    )
    assert dir_placeholder_0.config is None
    assert dir_placeholder_0.suffix == ""
    str_0 = "}<A:%``j#O)\x0ci"
    with pytest.raises(module_2.ConfigurationError):
        module_1.yaml_load(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_1.yaml_load(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    dir_placeholder_0 = module_1._DirPlaceholder(none_type_0)
    assert (
        f"{type(dir_placeholder_0).__module__}.{type(dir_placeholder_0).__qualname__}"
        == "mkdocs.utils.yaml._DirPlaceholder"
    )
    assert dir_placeholder_0.config is None
    assert dir_placeholder_0.suffix == ""
    dir_placeholder_0.__fspath__()


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    var_0 = module_1.get_yaml_loader()
    relative_dir_placeholder_0 = module_1.RelativeDirPlaceholder(
        none_type_0, none_type_0
    )
    assert (
        f"{type(relative_dir_placeholder_0).__module__}.{type(relative_dir_placeholder_0).__qualname__}"
        == "mkdocs.utils.yaml.RelativeDirPlaceholder"
    )
    assert relative_dir_placeholder_0.config is None
    assert relative_dir_placeholder_0.suffix is None
    relative_dir_placeholder_0.__str__()


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = -2134
    docs_dir_placeholder_0 = module_1.DocsDirPlaceholder(int_0)
    assert (
        f"{type(docs_dir_placeholder_0).__module__}.{type(docs_dir_placeholder_0).__qualname__}"
        == "mkdocs.utils.yaml.DocsDirPlaceholder"
    )
    assert docs_dir_placeholder_0.config == -2134
    assert docs_dir_placeholder_0.suffix == ""
    str_0 = "?"
    dict_0 = module_1.yaml_load(str_0)
    docs_dir_placeholder_0.__fspath__()


@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_0.purge()
    config_dir_placeholder_0 = module_1.ConfigDirPlaceholder(var_0, var_0)
    assert (
        f"{type(config_dir_placeholder_0).__module__}.{type(config_dir_placeholder_0).__qualname__}"
        == "mkdocs.utils.yaml.ConfigDirPlaceholder"
    )
    assert config_dir_placeholder_0.config is None
    assert config_dir_placeholder_0.suffix is None
    config_dir_placeholder_0.value()


def test_case_9():
    str_0 = 'LH\tr"'
    config_dir_placeholder_0 = module_1.ConfigDirPlaceholder(str_0)
    assert (
        f"{type(config_dir_placeholder_0).__module__}.{type(config_dir_placeholder_0).__qualname__}"
        == "mkdocs.utils.yaml.ConfigDirPlaceholder"
    )
    assert config_dir_placeholder_0.config == 'LH\tr"'
    assert config_dir_placeholder_0.suffix == ""
    with pytest.raises(module_2.ConfigurationError):
        module_1.RelativeDirPlaceholder(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'l,4}0"8BoxNp'
    dir_placeholder_0 = module_1._DirPlaceholder(str_0)
    assert (
        f"{type(dir_placeholder_0).__module__}.{type(dir_placeholder_0).__qualname__}"
        == "mkdocs.utils.yaml._DirPlaceholder"
    )
    assert dir_placeholder_0.config == 'l,4}0"8BoxNp'
    assert dir_placeholder_0.suffix == ""
    dict_0 = module_1.get_yaml_loader(config=str_0)
    none_type_0 = None
    list_0 = [none_type_0, str_0, dict_0, none_type_0]
    config_dir_placeholder_0 = module_1.ConfigDirPlaceholder(list_0)
    assert config_dir_placeholder_0.suffix == ""
    module_0.subn(dict_0, none_type_0, none_type_0)


def test_case_11():
    str_0 = ""
    none_type_0 = None
    dict_0 = module_1.yaml_load(str_0, none_type_0)
