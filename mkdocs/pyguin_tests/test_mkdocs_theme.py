# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mkdocs.theme as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = ")"
    module_0.Theme(str_0, static_templates=str_0)


def test_case_1():
    theme_0 = module_0.Theme()
    assert (
        f"{type(theme_0).__module__}.{type(theme_0).__qualname__}"
        == "mkdocs.theme.Theme"
    )
    assert len(theme_0) == 2
    assert (
        f"{type(module_0.Theme.locale).__module__}.{type(module_0.Theme.locale).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Theme.custom_dir).__module__}.{type(module_0.Theme.custom_dir).__qualname__}"
        == "builtins.property"
    )


def test_case_2():
    str_0 = "nn"
    theme_0 = module_0.Theme(custom_dir=str_0, locale=str_0)
    assert (
        f"{type(theme_0).__module__}.{type(theme_0).__qualname__}"
        == "mkdocs.theme.Theme"
    )
    assert len(theme_0) == 2
    assert (
        f"{type(module_0.Theme.locale).__module__}.{type(module_0.Theme.locale).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Theme.custom_dir).__module__}.{type(module_0.Theme.custom_dir).__qualname__}"
        == "builtins.property"
    )


def test_case_3():
    str_0 = "Y5?zKW:L"
    theme_0 = module_0.Theme(custom_dir=str_0)
    assert (
        f"{type(theme_0).__module__}.{type(theme_0).__qualname__}"
        == "mkdocs.theme.Theme"
    )
    assert len(theme_0) == 2
    assert (
        f"{type(module_0.Theme.locale).__module__}.{type(module_0.Theme.locale).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Theme.custom_dir).__module__}.{type(module_0.Theme.custom_dir).__qualname__}"
        == "builtins.property"
    )


def test_case_4():
    theme_0 = module_0.Theme()
    assert (
        f"{type(theme_0).__module__}.{type(theme_0).__qualname__}"
        == "mkdocs.theme.Theme"
    )
    assert len(theme_0) == 2
    assert (
        f"{type(module_0.Theme.locale).__module__}.{type(module_0.Theme.locale).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Theme.custom_dir).__module__}.{type(module_0.Theme.custom_dir).__qualname__}"
        == "builtins.property"
    )
    var_0 = theme_0.popitem()
    assert len(theme_0) == 1
    str_0 = theme_0.__repr__()


def test_case_5():
    theme_0 = module_0.Theme()
    assert (
        f"{type(theme_0).__module__}.{type(theme_0).__qualname__}"
        == "mkdocs.theme.Theme"
    )
    assert len(theme_0) == 2
    assert (
        f"{type(module_0.Theme.locale).__module__}.{type(module_0.Theme.locale).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Theme.custom_dir).__module__}.{type(module_0.Theme.custom_dir).__qualname__}"
        == "builtins.property"
    )
    var_0 = theme_0.__eq__(theme_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_6():
    theme_0 = module_0.Theme()
    assert (
        f"{type(theme_0).__module__}.{type(theme_0).__qualname__}"
        == "mkdocs.theme.Theme"
    )
    assert len(theme_0) == 2
    assert (
        f"{type(module_0.Theme.locale).__module__}.{type(module_0.Theme.locale).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Theme.custom_dir).__module__}.{type(module_0.Theme.custom_dir).__qualname__}"
        == "builtins.property"
    )
    theme_0.__setitem__(theme_0, theme_0)


def test_case_7():
    theme_0 = module_0.Theme()
    assert (
        f"{type(theme_0).__module__}.{type(theme_0).__qualname__}"
        == "mkdocs.theme.Theme"
    )
    assert len(theme_0) == 2
    assert (
        f"{type(module_0.Theme.locale).__module__}.{type(module_0.Theme.locale).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Theme.custom_dir).__module__}.{type(module_0.Theme.custom_dir).__qualname__}"
        == "builtins.property"
    )
    str_0 = theme_0.__repr__()
    assert (
        str_0
        == "Theme(name=None, dirs=['/Users/souleymanecheikhsidia/Documents/Spring 2025/Pyguin_test/mkdocs/mkdocs/templates'], static_templates={'sitemap.xml'}, name=None, locale=Locale('en'))"
    )
    none_type_0 = None
    var_0 = theme_0.__len__()
    var_1 = theme_0.__contains__(var_0)
    var_2 = theme_0.__iter__()
    theme_1 = module_0.Theme(custom_dir=theme_0, locale=none_type_0)
    var_3 = theme_1.values()
    var_4 = theme_0.__len__()
    theme_0.update(var_4, **var_4)


def test_case_8():
    theme_0 = module_0.Theme()
    assert (
        f"{type(theme_0).__module__}.{type(theme_0).__qualname__}"
        == "mkdocs.theme.Theme"
    )
    assert len(theme_0) == 2
    assert (
        f"{type(module_0.Theme.locale).__module__}.{type(module_0.Theme.locale).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Theme.custom_dir).__module__}.{type(module_0.Theme.custom_dir).__qualname__}"
        == "builtins.property"
    )
    theme_1 = module_0.Theme()
    assert len(theme_1) == 2
    var_0 = theme_1.__iter__()
    var_1 = theme_1.__len__()
    var_2 = theme_1.items()
    str_0 = " This seems to be a footnote that is never referenced."
    var_0.__getitem__(str_0)


def test_case_9():
    none_type_0 = None
    theme_0 = module_0.Theme(custom_dir=none_type_0)
    assert (
        f"{type(theme_0).__module__}.{type(theme_0).__qualname__}"
        == "mkdocs.theme.Theme"
    )
    assert len(theme_0) == 2
    assert (
        f"{type(module_0.Theme.locale).__module__}.{type(module_0.Theme.locale).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Theme.custom_dir).__module__}.{type(module_0.Theme.custom_dir).__qualname__}"
        == "builtins.property"
    )
    environment_0 = theme_0.get_env()
    theme_0.__delitem__(none_type_0)
