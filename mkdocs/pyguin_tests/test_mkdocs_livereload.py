# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mkdocs.livereload as module_0
import email._encoded_words as module_1
import encodings.utf_8 as module_2


def test_case_0():
    str_0 = " Rr\x0bECyL\rfR}/BL]RHL"
    live_reload_server_0 = module_0.LiveReloadServer(
        str_0, str_0, str_0, str_0, polling_interval=str_0
    )
    assert (
        f"{type(live_reload_server_0).__module__}.{type(live_reload_server_0).__qualname__}"
        == "mkdocs.livereload.LiveReloadServer"
    )
    assert live_reload_server_0.builder == " Rr\x0bECyL\rfR}/BL]RHL"
    assert (
        live_reload_server_0.root
        == "/Users/souleymanecheikhsidia/Documents/Spring 2025/Pyguin_test/mkdocs/ Rr\x0bECyL\rfR}/BL]RHL"
    )
    assert live_reload_server_0.mount_path == "/"
    assert (
        live_reload_server_0.url
        == "http:// Rr\x0bECyL\rfR}/BL]RHL: Rr\x0bECyL\rfR}/BL]RHL/"
    )
    assert live_reload_server_0.build_delay == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert live_reload_server_0.shutdown_delay == pytest.approx(
        0.25, abs=0.01, rel=0.01
    )
    assert live_reload_server_0.server_address == (
        " Rr\x0bECyL\rfR}/BL]RHL",
        " Rr\x0bECyL\rfR}/BL]RHL",
    )
    assert (
        f"{type(live_reload_server_0.socket).__module__}.{type(live_reload_server_0.socket).__qualname__}"
        == "socket.socket"
    )
    assert (
        f"{type(live_reload_server_0.serve_thread).__module__}.{type(live_reload_server_0.serve_thread).__qualname__}"
        == "threading.Thread"
    )
    assert (
        f"{type(live_reload_server_0.observer).__module__}.{type(live_reload_server_0.observer).__qualname__}"
        == "watchdog.observers.polling.PollingObserver"
    )
    assert module_0.LiveReloadServer.daemon_threads is True
    assert module_0.LiveReloadServer.poll_response_timeout == 60


def test_case_1():
    none_type_0 = None
    logger_adapter_0 = module_0._LoggerAdapter(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "Oi_'_$fD,,"
    var_0 = module_1.len_b(str_0)
    live_reload_server_0 = module_0.LiveReloadServer(var_0, str_0, str_0, str_0)
    assert (
        f"{type(live_reload_server_0).__module__}.{type(live_reload_server_0).__qualname__}"
        == "mkdocs.livereload.LiveReloadServer"
    )
    assert live_reload_server_0.builder == 16
    assert (
        live_reload_server_0.root
        == "/Users/souleymanecheikhsidia/Documents/Spring 2025/Pyguin_test/mkdocs/Oi_'_$fD,,"
    )
    assert live_reload_server_0.mount_path == "/"
    assert live_reload_server_0.url == "http://Oi_'_$fD,,:Oi_'_$fD,,/"
    assert live_reload_server_0.build_delay == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert live_reload_server_0.shutdown_delay == pytest.approx(
        0.25, abs=0.01, rel=0.01
    )
    assert live_reload_server_0.server_address == ("Oi_'_$fD,,", "Oi_'_$fD,,")
    assert (
        f"{type(live_reload_server_0.socket).__module__}.{type(live_reload_server_0.socket).__qualname__}"
        == "socket.socket"
    )
    assert (
        f"{type(live_reload_server_0.serve_thread).__module__}.{type(live_reload_server_0.serve_thread).__qualname__}"
        == "threading.Thread"
    )
    assert (
        f"{type(live_reload_server_0.observer).__module__}.{type(live_reload_server_0.observer).__qualname__}"
        == "watchdog.observers.polling.PollingObserver"
    )
    assert module_0.LiveReloadServer.daemon_threads is True
    assert module_0.LiveReloadServer.poll_response_timeout == 60
    module_0.LiveReloadServer(var_0, var_0, str_0, live_reload_server_0, str_0)


def test_case_3():
    str_0 = " Rr\x0bECyL\rfR}/BL]RHL"
    live_reload_server_0 = module_0.LiveReloadServer(
        str_0, str_0, str_0, str_0, polling_interval=str_0
    )
    assert (
        f"{type(live_reload_server_0).__module__}.{type(live_reload_server_0).__qualname__}"
        == "mkdocs.livereload.LiveReloadServer"
    )
    assert live_reload_server_0.builder == " Rr\x0bECyL\rfR}/BL]RHL"
    assert (
        live_reload_server_0.root
        == "/Users/souleymanecheikhsidia/Documents/Spring 2025/Pyguin_test/mkdocs/ Rr\x0bECyL\rfR}/BL]RHL"
    )
    assert live_reload_server_0.mount_path == "/"
    assert (
        live_reload_server_0.url
        == "http:// Rr\x0bECyL\rfR}/BL]RHL: Rr\x0bECyL\rfR}/BL]RHL/"
    )
    assert live_reload_server_0.build_delay == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert live_reload_server_0.shutdown_delay == pytest.approx(
        0.25, abs=0.01, rel=0.01
    )
    assert live_reload_server_0.server_address == (
        " Rr\x0bECyL\rfR}/BL]RHL",
        " Rr\x0bECyL\rfR}/BL]RHL",
    )
    assert (
        f"{type(live_reload_server_0.socket).__module__}.{type(live_reload_server_0.socket).__qualname__}"
        == "socket.socket"
    )
    assert (
        f"{type(live_reload_server_0.serve_thread).__module__}.{type(live_reload_server_0.serve_thread).__qualname__}"
        == "threading.Thread"
    )
    assert (
        f"{type(live_reload_server_0.observer).__module__}.{type(live_reload_server_0.observer).__qualname__}"
        == "watchdog.observers.polling.PollingObserver"
    )
    assert module_0.LiveReloadServer.daemon_threads is True
    assert module_0.LiveReloadServer.poll_response_timeout == 60
    none_type_0 = live_reload_server_0.watch(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    str_0 = "p"
    live_reload_server_0 = module_0.LiveReloadServer(
        none_type_0, str_0, none_type_0, str_0, polling_interval=str_0
    )
    assert (
        f"{type(live_reload_server_0).__module__}.{type(live_reload_server_0).__qualname__}"
        == "mkdocs.livereload.LiveReloadServer"
    )
    assert live_reload_server_0.builder is None
    assert (
        live_reload_server_0.root
        == "/Users/souleymanecheikhsidia/Documents/Spring 2025/Pyguin_test/mkdocs/p"
    )
    assert live_reload_server_0.mount_path == "/"
    assert live_reload_server_0.url == "http://p:None/"
    assert live_reload_server_0.build_delay == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert live_reload_server_0.shutdown_delay == pytest.approx(
        0.25, abs=0.01, rel=0.01
    )
    assert live_reload_server_0.server_address == ("p", None)
    assert (
        f"{type(live_reload_server_0.socket).__module__}.{type(live_reload_server_0.socket).__qualname__}"
        == "socket.socket"
    )
    assert (
        f"{type(live_reload_server_0.serve_thread).__module__}.{type(live_reload_server_0.serve_thread).__qualname__}"
        == "threading.Thread"
    )
    assert (
        f"{type(live_reload_server_0.observer).__module__}.{type(live_reload_server_0.observer).__qualname__}"
        == "watchdog.observers.polling.PollingObserver"
    )
    assert module_0.LiveReloadServer.daemon_threads is True
    assert module_0.LiveReloadServer.poll_response_timeout == 60
    none_type_1 = live_reload_server_0.shutdown()
    str_1 = "_\nSstp"
    bool_0 = False
    str_1.watch(none_type_0, bool_0)


def test_case_5():
    str_0 = ']"O0kZ\n]X@lGsA'
    str_1 = " Rr\x0bECyL\rfR}/BL]RHL"
    str_2 = "DQ`<O"
    live_reload_server_0 = module_0.LiveReloadServer(
        str_1, str_2, str_2, str_0, polling_interval=str_2
    )
    assert (
        f"{type(live_reload_server_0).__module__}.{type(live_reload_server_0).__qualname__}"
        == "mkdocs.livereload.LiveReloadServer"
    )
    assert live_reload_server_0.builder == " Rr\x0bECyL\rfR}/BL]RHL"
    assert (
        live_reload_server_0.root
        == '/Users/souleymanecheikhsidia/Documents/Spring 2025/Pyguin_test/mkdocs/]"O0kZ\n]X@lGsA'
    )
    assert live_reload_server_0.mount_path == "/"
    assert live_reload_server_0.url == "http://DQ`<O:DQ`<O/"
    assert live_reload_server_0.build_delay == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert live_reload_server_0.shutdown_delay == pytest.approx(
        0.25, abs=0.01, rel=0.01
    )
    assert live_reload_server_0.server_address == ("DQ`<O", "DQ`<O")
    assert (
        f"{type(live_reload_server_0.socket).__module__}.{type(live_reload_server_0.socket).__qualname__}"
        == "socket.socket"
    )
    assert (
        f"{type(live_reload_server_0.serve_thread).__module__}.{type(live_reload_server_0.serve_thread).__qualname__}"
        == "threading.Thread"
    )
    assert (
        f"{type(live_reload_server_0.observer).__module__}.{type(live_reload_server_0.observer).__qualname__}"
        == "watchdog.observers.polling.PollingObserver"
    )
    assert module_0.LiveReloadServer.daemon_threads is True
    assert module_0.LiveReloadServer.poll_response_timeout == 60
    with pytest.raises(TypeError):
        live_reload_server_0.watch(str_1, str_2)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    str_0 = ']"O0kZ\n]X@lGsA'
    live_reload_server_0 = module_0.LiveReloadServer(
        none_type_0, str_0, none_type_0, str_0, polling_interval=str_0
    )
    assert (
        f"{type(live_reload_server_0).__module__}.{type(live_reload_server_0).__qualname__}"
        == "mkdocs.livereload.LiveReloadServer"
    )
    assert live_reload_server_0.builder is None
    assert (
        live_reload_server_0.root
        == '/Users/souleymanecheikhsidia/Documents/Spring 2025/Pyguin_test/mkdocs/]"O0kZ\n]X@lGsA'
    )
    assert live_reload_server_0.mount_path == "/"
    assert live_reload_server_0.url == 'http://]"O0kZ\n]X@lGsA:None/'
    assert live_reload_server_0.build_delay == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert live_reload_server_0.shutdown_delay == pytest.approx(
        0.25, abs=0.01, rel=0.01
    )
    assert live_reload_server_0.server_address == (']"O0kZ\n]X@lGsA', None)
    assert (
        f"{type(live_reload_server_0.socket).__module__}.{type(live_reload_server_0.socket).__qualname__}"
        == "socket.socket"
    )
    assert (
        f"{type(live_reload_server_0.serve_thread).__module__}.{type(live_reload_server_0.serve_thread).__qualname__}"
        == "threading.Thread"
    )
    assert (
        f"{type(live_reload_server_0.observer).__module__}.{type(live_reload_server_0.observer).__qualname__}"
        == "watchdog.observers.polling.PollingObserver"
    )
    assert module_0.LiveReloadServer.daemon_threads is True
    assert module_0.LiveReloadServer.poll_response_timeout == 60
    live_reload_server_0.serve_request(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    str_0 = "p"
    str_1 = " Rr\x0bECyL\rfR}/BL]RHL"
    live_reload_server_0 = module_0.LiveReloadServer(
        none_type_0, str_0, none_type_0, str_1, polling_interval=str_0
    )
    assert (
        f"{type(live_reload_server_0).__module__}.{type(live_reload_server_0).__qualname__}"
        == "mkdocs.livereload.LiveReloadServer"
    )
    assert live_reload_server_0.builder is None
    assert (
        live_reload_server_0.root
        == "/Users/souleymanecheikhsidia/Documents/Spring 2025/Pyguin_test/mkdocs/ Rr\x0bECyL\rfR}/BL]RHL"
    )
    assert live_reload_server_0.mount_path == "/"
    assert live_reload_server_0.url == "http://p:None/"
    assert live_reload_server_0.build_delay == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert live_reload_server_0.shutdown_delay == pytest.approx(
        0.25, abs=0.01, rel=0.01
    )
    assert live_reload_server_0.server_address == ("p", None)
    assert (
        f"{type(live_reload_server_0.socket).__module__}.{type(live_reload_server_0.socket).__qualname__}"
        == "socket.socket"
    )
    assert (
        f"{type(live_reload_server_0.serve_thread).__module__}.{type(live_reload_server_0.serve_thread).__qualname__}"
        == "threading.Thread"
    )
    assert (
        f"{type(live_reload_server_0.observer).__module__}.{type(live_reload_server_0.observer).__qualname__}"
        == "watchdog.observers.polling.PollingObserver"
    )
    assert module_0.LiveReloadServer.daemon_threads is True
    assert module_0.LiveReloadServer.poll_response_timeout == 60
    none_type_1 = live_reload_server_0.shutdown()
    float_0 = 1628.59183
    live_reload_server_1 = module_0.LiveReloadServer(
        none_type_0, live_reload_server_0, str_0, str_0, polling_interval=float_0
    )
    assert live_reload_server_1.mount_path == "/"
    assert live_reload_server_1.build_delay == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert live_reload_server_1.shutdown_delay == pytest.approx(
        0.25, abs=0.01, rel=0.01
    )
    live_reload_server_0.shutdown(live_reload_server_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "<IP:PORT>"
    bool_0 = False
    live_reload_server_0 = module_0.LiveReloadServer(
        str_0, str_0, bool_0, str_0, polling_interval=bool_0, shutdown_delay=bool_0
    )
    assert (
        f"{type(live_reload_server_0).__module__}.{type(live_reload_server_0).__qualname__}"
        == "mkdocs.livereload.LiveReloadServer"
    )
    assert live_reload_server_0.builder == "<IP:PORT>"
    assert (
        live_reload_server_0.root
        == "/Users/souleymanecheikhsidia/Documents/Spring 2025/Pyguin_test/mkdocs/<IP:PORT>"
    )
    assert live_reload_server_0.mount_path == "/"
    assert live_reload_server_0.url == "http://<IP:PORT>:False/"
    assert live_reload_server_0.build_delay == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert live_reload_server_0.shutdown_delay is False
    assert live_reload_server_0.server_address == ("<IP:PORT>", False)
    assert (
        f"{type(live_reload_server_0.socket).__module__}.{type(live_reload_server_0.socket).__qualname__}"
        == "socket.socket"
    )
    assert (
        f"{type(live_reload_server_0.serve_thread).__module__}.{type(live_reload_server_0.serve_thread).__qualname__}"
        == "threading.Thread"
    )
    assert (
        f"{type(live_reload_server_0.observer).__module__}.{type(live_reload_server_0.observer).__qualname__}"
        == "watchdog.observers.polling.PollingObserver"
    )
    assert module_0.LiveReloadServer.daemon_threads is True
    assert module_0.LiveReloadServer.poll_response_timeout == 60
    str_1 = "A:f6d41+3pwa"
    none_type_0 = None
    none_type_1 = live_reload_server_0.watch(str_1, str_0, recursive=none_type_0)
    module_2.decode(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    str_0 = ","
    live_reload_server_0 = module_0.LiveReloadServer(
        none_type_0, str_0, none_type_0, str_0, polling_interval=str_0
    )
    assert (
        f"{type(live_reload_server_0).__module__}.{type(live_reload_server_0).__qualname__}"
        == "mkdocs.livereload.LiveReloadServer"
    )
    assert live_reload_server_0.builder is None
    assert (
        live_reload_server_0.root
        == "/Users/souleymanecheikhsidia/Documents/Spring 2025/Pyguin_test/mkdocs/,"
    )
    assert live_reload_server_0.mount_path == "/"
    assert live_reload_server_0.url == "http://,:None/"
    assert live_reload_server_0.build_delay == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert live_reload_server_0.shutdown_delay == pytest.approx(
        0.25, abs=0.01, rel=0.01
    )
    assert live_reload_server_0.server_address == (",", None)
    assert (
        f"{type(live_reload_server_0.socket).__module__}.{type(live_reload_server_0.socket).__qualname__}"
        == "socket.socket"
    )
    assert (
        f"{type(live_reload_server_0.serve_thread).__module__}.{type(live_reload_server_0.serve_thread).__qualname__}"
        == "threading.Thread"
    )
    assert (
        f"{type(live_reload_server_0.observer).__module__}.{type(live_reload_server_0.observer).__qualname__}"
        == "watchdog.observers.polling.PollingObserver"
    )
    assert module_0.LiveReloadServer.daemon_threads is True
    assert module_0.LiveReloadServer.poll_response_timeout == 60
    none_type_1 = live_reload_server_0.shutdown()
    none_type_2 = live_reload_server_0.watch(str_0)
    bool_0 = True
    none_type_3 = live_reload_server_0.watch(str_0, recursive=bool_0)
    live_reload_server_0.serve_request(none_type_3, none_type_3)
